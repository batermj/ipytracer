import { DOMWidgetView, ViewList } from './widget';
import { BoxModel, JupyterPhosphorPanelWidget } from './widget_box';
import { TabBar } from 'phosphor/lib/ui/tabbar';
import { Panel } from 'phosphor/lib/ui/panel';
export declare class SelectionContainerModel extends BoxModel {
    defaults(): any;
}
export declare class AccordionModel extends SelectionContainerModel {
    defaults(): any;
}
export declare class AccordionView extends DOMWidgetView {
    initialize(parameters: any): void;
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Set header titles
     */
    update_titles(): void;
    /**
     * Make the rendering and selected index consistent.
     */
    update_selected_index(options?: any): void;
    /**
     * Called when a child is removed from children list.
     */
    remove_child_view(view: any): void;
    /**
     * Called when a child is added to children list.
     */
    add_child_view(model: any): any;
    /**
     * We remove this widget before removing the children as an optimization
     * we want to remove the entire container from the DOM first before
     * removing each individual child separately.
     */
    remove(): void;
    children_views: ViewList;
    pages: HTMLDivElement[];
    view_pages: {
        [key: string]: HTMLDivElement;
    };
}
export declare class TabModel extends SelectionContainerModel {
    defaults(): any;
}
export declare class TabView extends DOMWidgetView {
    _createElement(tagName: string): HTMLElement;
    _setElement(el: HTMLElement): void;
    /**
     * Public constructor.
     */
    initialize(parameters: any): void;
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Render tab views based on the current model's children.
     */
    updateTabs(): void;
    /**
     * Called when a child is added to children list.
     */
    addChildView(model: any, index: any): any;
    /**
     * Update the contents of this view
     *
     * Called when the model is changed.  The model may have been
     * changed by another view or by a state update from the back-end.
     */
    update(): void;
    /**
     * Updates the tab page titles.
     */
    updateTitles(): void;
    /**
     * Updates the selected index.
     */
    updateSelectedIndex(): void;
    remove(): void;
    _onTabChanged(sender: TabBar, args: TabBar.ICurrentChangedArgs): void;
    updatingTabs: boolean;
    childrenViews: ViewList;
    tabBar: TabBar;
    tabContents: Panel;
    pWidget: JupyterPhosphorPanelWidget;
}
