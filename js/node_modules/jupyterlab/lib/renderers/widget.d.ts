import 'codemirror/addon/runmode/runmode';
import { RenderMime } from '../rendermime';
import { Message } from 'phosphor/lib/core/messaging';
import { Widget } from 'phosphor/lib/ui/widget';
export declare const HTML_COMMON_CLASS: string;
export declare class RenderedHTMLCommon extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
/**
 * A widget for displaying HTML and rendering math.
 */
export declare class RenderedHTML extends RenderedHTMLCommon {
    /**
     * Construct a new html widget.
     */
    constructor(options: RenderMime.IRendererOptions<string>);
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    onAfterAttach(msg: Message): void;
}
/**
 * A widget for displaying Markdown with embeded latex.
 */
export declare class RenderedMarkdown extends RenderedHTMLCommon {
    /**
     * Construct a new markdown widget.
     */
    constructor(options: RenderMime.IRendererOptions<string>);
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    onAfterAttach(msg: Message): void;
    private _rendered;
}
/**
 * A widget for displaying LaTeX output.
 */
export declare class RenderedLatex extends Widget {
    /**
     * Construct a new latex widget.
     */
    constructor(options: RenderMime.IRendererOptions<string>);
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    onAfterAttach(msg: Message): void;
}
export declare class RenderedImage extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
export declare class RenderedText extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
export declare class RenderedJavascript extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
export declare class RenderedSVG extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
export declare class RenderedPDF extends Widget {
    constructor(options: RenderMime.IRendererOptions<string>);
}
/**
 * Resolve the relative urls in the image and anchor tags of a node tree.
 *
 * @param node - The head html element.
 *
 * @param resolver - A url resolver.
 */
export declare function resolveUrls(node: HTMLElement, resolver: RenderMime.IResolver): void;
