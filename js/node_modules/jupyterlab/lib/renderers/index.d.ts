import { Widget } from 'phosphor/lib/ui/widget';
import { RenderMime } from '../rendermime';
/**
 * A renderer for raw html.
 */
export declare class HTMLRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for `<img>` data.
 */
export declare class ImageRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for plain text and Jupyter console text data.
 */
export declare class TextRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for raw `<script>` data.
 */
export declare class JavascriptRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for `<svg>` data.
 */
export declare class SVGRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for PDF data.
 */
export declare class PDFRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the transformed mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for LateX data.
 */
export declare class LatexRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
/**
 * A renderer for Jupyter Markdown data.
 */
export declare class MarkdownRenderer implements RenderMime.IRenderer {
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
    /**
     * Whether the input can safely sanitized for a given mimetype.
     */
    isSanitizable(mimetype: string): boolean;
    /**
     * Whether the input is safe without sanitization.
     */
    isSafe(mimetype: string): boolean;
    /**
     * Render the mime bundle.
     */
    render(options: RenderMime.IRendererOptions<string>): Widget;
}
