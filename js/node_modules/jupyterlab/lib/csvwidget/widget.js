// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var signaling_1 = require('phosphor/lib/core/signaling');
var panel_1 = require('phosphor/lib/ui/panel');
var widget_1 = require('phosphor/lib/ui/widget');
var docregistry_1 = require('../docregistry');
var table_1 = require('./table');
var toolbar_1 = require('./toolbar');
/**
 * The class name added to a CSV widget.
 */
var CSV_CLASS = 'jp-CSVWidget';
/**
 * The class name added to a CSV widget warning.
 */
var CSV_WARNING_CLASS = 'jp-CSVWidget-warning';
/**
 * A widget for CSV tables.
 */
var CSVWidget = (function (_super) {
    __extends(CSVWidget, _super);
    /**
     * Construct a new CSV widget.
     */
    function CSVWidget(options) {
        var _this = this;
        _super.call(this);
        this._context = null;
        this._model = null;
        this._table = null;
        this._toolbar = null;
        this._warning = null;
        var context = this._context = options.context;
        var layout = this.layout = new panel_1.PanelLayout();
        this.addClass(CSV_CLASS);
        this.title.label = context.path.split('/').pop();
        this._warning = new widget_1.Widget();
        this._warning.addClass(CSV_WARNING_CLASS);
        this._model = new table_1.CSVModel({ content: context.model.toString() });
        this._table = new table_1.CSVTable();
        this._table.model = this._model;
        this._model.maxExceeded.connect(function (sender, overflow) {
            var available = overflow.available, maximum = overflow.maximum;
            var message = "Table is too long to render,\n        rendering " + maximum + " of " + available + " rows";
            _this._warning.node.textContent = message;
        }, this);
        this._toolbar = new toolbar_1.CSVToolbar();
        this._toolbar.delimiterChanged.connect(function (sender, delimiter) {
            _this._table.model.delimiter = delimiter;
        }, this);
        layout.addWidget(this._toolbar);
        layout.addWidget(this._table);
        layout.addWidget(this._warning);
        context.pathChanged.connect(function (c, path) {
            _this.title.label = path.split('/').pop();
        }, this);
        context.model.contentChanged.connect(function () {
            _this._table.model.content = context.model.toString();
        }, this);
    }
    Object.defineProperty(CSVWidget.prototype, "context", {
        /**
         * The CSV widget's context.
         */
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSVWidget.prototype, "model", {
        /**
         * The CSV data model.
         */
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the widget.
     */
    CSVWidget.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        _super.prototype.dispose.call(this);
        signaling_1.disconnectReceiver(this);
        this._model.dispose();
        this._model = null;
        this._table.dispose();
        this._table = null;
        this._toolbar.dispose();
        this._toolbar = null;
        this._warning.dispose();
        this._warning = null;
    };
    /**
     * Handle `'activate-request'` messages.
     */
    CSVWidget.prototype.onActivateRequest = function (msg) {
        this.node.focus();
    };
    return CSVWidget;
}(widget_1.Widget));
exports.CSVWidget = CSVWidget;
/**
 * A widget factory for CSV widgets.
 */
var CSVWidgetFactory = (function (_super) {
    __extends(CSVWidgetFactory, _super);
    function CSVWidgetFactory() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(CSVWidgetFactory.prototype, "name", {
        /**
         * The name of the widget to display in dialogs.
         */
        get: function () {
            return 'Table';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSVWidgetFactory.prototype, "fileExtensions", {
        /**
         * The file extensions the widget can view.
         */
        get: function () {
            return ['.csv'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSVWidgetFactory.prototype, "defaultFor", {
        /**
         * The file extensions for which the factory should be the default.
         */
        get: function () {
            return ['.csv'];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create a new widget given a context.
     */
    CSVWidgetFactory.prototype.createNewWidget = function (context) {
        return new CSVWidget({ context: context });
    };
    return CSVWidgetFactory;
}(docregistry_1.ABCWidgetFactory));
exports.CSVWidgetFactory = CSVWidgetFactory;
//# sourceMappingURL=widget.js.map