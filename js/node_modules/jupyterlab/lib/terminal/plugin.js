// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var instancetracker_1 = require('../common/instancetracker');
var menu_1 = require('phosphor/lib/ui/menu');
var commandpalette_1 = require('../commandpalette');
var mainmenu_1 = require('../mainmenu');
var services_1 = require('../services');
var statedb_1 = require('../statedb');
var index_1 = require('./index');
/**
 * The class name for all main area landscape tab icons.
 */
var LANDSCAPE_ICON_CLASS = 'jp-MainAreaLandscapeIcon';
/**
 * The class name for the terminal icon in the default theme.
 */
var TERMINAL_ICON_CLASS = 'jp-ImageTerminal';
/**
 * The terminal plugin state namespace.
 */
var NAMESPACE = 'terminals';
/**
 * The terminal widget instance tracker.
 */
var tracker = new instancetracker_1.InstanceTracker();
/**
 * The default terminal extension.
 */
exports.terminalExtension = {
    id: 'jupyter.extensions.terminal',
    requires: [services_1.IServiceManager, mainmenu_1.IMainMenu, commandpalette_1.ICommandPalette, statedb_1.IStateDB],
    activate: activateTerminal,
    autoStart: true
};
function activateTerminal(app, services, mainMenu, palette, state) {
    // Bail if there are no terminals available.
    if (!services.terminals.isAvailable()) {
        console.log('Disabling terminals plugin because they are not available on the server');
        return;
    }
    var commands = app.commands, keymap = app.keymap;
    var newTerminalId = 'terminal:create-new';
    var increaseTerminalFontSize = 'terminal:increase-font';
    var decreaseTerminalFontSize = 'terminal:decrease-font';
    var toggleTerminalTheme = 'terminal:toggle-theme';
    var openTerminalId = 'terminal:open';
    var options = {
        background: 'black',
        color: 'white',
        fontSize: 13
    };
    // Sync tracker with currently focused widget.
    app.shell.currentChanged.connect(function (sender, args) {
        tracker.sync(args.newValue);
    });
    // Add terminal commands.
    commands.addCommand(newTerminalId, {
        label: 'New Terminal',
        caption: 'Start a new terminal session',
        execute: function (args) {
            var name = args ? args['name'] : '';
            var term = new index_1.TerminalWidget(options);
            term.title.closable = true;
            term.title.icon = LANDSCAPE_ICON_CLASS + " " + TERMINAL_ICON_CLASS;
            app.shell.addToMainArea(term);
            app.shell.activateMain(term.id);
            tracker.add(term);
            var promise;
            if (name) {
                promise = services.terminals.connectTo(name);
            }
            else {
                promise = services.terminals.startNew();
            }
            promise.then(function (session) {
                var key = NAMESPACE + ":" + session.name;
                term.session = session;
                state.save(key, { name: session.name });
                term.disposed.connect(function () { state.remove(key); });
            });
        }
    });
    commands.addCommand(increaseTerminalFontSize, {
        label: 'Increase Terminal Font Size',
        execute: function () {
            if (options.fontSize < 72) {
                options.fontSize++;
                tracker.forEach(function (widget) { widget.fontSize = options.fontSize; });
            }
        }
    });
    commands.addCommand(decreaseTerminalFontSize, {
        label: 'Decrease Terminal Font Size',
        execute: function () {
            if (options.fontSize > 9) {
                options.fontSize--;
                tracker.forEach(function (widget) { widget.fontSize = options.fontSize; });
            }
        }
    });
    commands.addCommand(toggleTerminalTheme, {
        label: 'Toggle Terminal Theme',
        caption: 'Switch Terminal Background and Font Colors',
        execute: function () {
            if (options.background === 'black') {
                options.background = 'white';
                options.color = 'black';
            }
            else {
                options.background = 'black';
                options.color = 'white';
            }
            tracker.forEach(function (widget) {
                widget.background = options.background;
                widget.color = options.color;
            });
        }
    });
    commands.addCommand(openTerminalId, {
        execute: function (args) {
            var name = args['name'];
            // Check for a running terminal with the given name.
            var widget = tracker.find(function (value) { return value.session.name === name; });
            if (widget) {
                app.shell.activateMain(widget.id);
            }
            else {
                // Otherwise, create a new terminal with a given name.
                commands.execute(newTerminalId, { name: name });
            }
        }
    });
    // Reload any terminals whose state has been stored.
    Promise.all([state.fetchNamespace(NAMESPACE), app.started])
        .then(function (_a) {
        var items = _a[0];
        var create = 'terminal:create-new';
        items.forEach(function (item) { app.commands.execute(create, item.value); });
    });
    // Add command palette items.
    var category = 'Terminal';
    [
        newTerminalId,
        increaseTerminalFontSize,
        decreaseTerminalFontSize,
        toggleTerminalTheme
    ].forEach(function (command) { return palette.addItem({ command: command, category: category }); });
    // Add menu items.
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    menu.title.label = 'Terminal';
    menu.addItem({ command: newTerminalId });
    menu.addItem({ command: increaseTerminalFontSize });
    menu.addItem({ command: decreaseTerminalFontSize });
    menu.addItem({ command: toggleTerminalTheme });
    mainMenu.addMenu(menu, { rank: 40 });
}
//# sourceMappingURL=plugin.js.map