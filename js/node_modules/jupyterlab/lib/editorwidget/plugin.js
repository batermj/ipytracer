// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var properties_1 = require('phosphor/lib/core/properties');
var menu_1 = require('phosphor/lib/ui/menu');
var instancetracker_1 = require('../common/instancetracker');
var docregistry_1 = require('../docregistry');
var widget_1 = require('./widget');
var commandpalette_1 = require('../commandpalette');
var mainmenu_1 = require('../mainmenu');
var statedb_1 = require('../statedb');
var index_1 = require('./index');
var widget_2 = require('../codemirror/widget');
require('codemirror/addon/edit/matchbrackets.js');
require('codemirror/addon/edit/closebrackets.js');
require('codemirror/addon/comment/comment.js');
require('codemirror/keymap/vim.js');
/**
 * The class name for all main area portrait tab icons.
 */
var PORTRAIT_ICON_CLASS = 'jp-MainAreaPortraitIcon';
/**
 * The class name for the text editor icon from the default theme.
 */
var EDITOR_ICON_CLASS = 'jp-ImageTextEditor';
/**
 * The state database namespace for editor widgets.
 */
var NAMESPACE = 'editorwidgets';
/**
 * The map of command ids used by the editor.
 */
var cmdIds = {
    lineNumbers: 'editor:line-numbers',
    lineWrap: 'editor:line-wrap',
    matchBrackets: 'editor:match-brackets',
    vimMode: 'editor:vim-mode',
    closeAll: 'editor:close-all',
    changeTheme: 'editor:change-theme',
    createConsole: 'editor:create-console',
    runCode: 'editor:run-code'
};
/**
 * The editor widget instance tracker.
 */
var tracker = new instancetracker_1.InstanceTracker();
/**
 * The editor handler extension.
 */
exports.editorHandlerProvider = {
    id: 'jupyter.services.editor-handler',
    requires: [docregistry_1.IDocumentRegistry, mainmenu_1.IMainMenu, commandpalette_1.ICommandPalette, statedb_1.IStateDB],
    provides: index_1.IEditorTracker,
    activate: activateEditorHandler,
    autoStart: true
};
/**
 * Sets up the editor widget
 */
function activateEditorHandler(app, registry, mainMenu, palette, state) {
    var widgetFactory = new widget_1.EditorWidgetFactory({
        name: 'Editor',
        fileExtensions: ['*'],
        defaultFor: ['*']
    });
    // Sync tracker with currently focused widget.
    app.shell.currentChanged.connect(function (sender, args) {
        tracker.sync(args.newValue);
    });
    widgetFactory.widgetCreated.connect(function (sender, widget) {
        widget.title.icon = PORTRAIT_ICON_CLASS + " " + EDITOR_ICON_CLASS;
        // Add the file path to the state database.
        var key = NAMESPACE + ":" + widget.context.path;
        state.save(key, { path: widget.context.path });
        // Remove the file path from the state database on disposal.
        widget.disposed.connect(function () { state.remove(key); });
        // Keep track of path changes in the state database.
        widget.context.pathChanged.connect(function (sender, path) {
            state.remove(key);
            key = NAMESPACE + ":" + path;
            state.save(key, { path: path });
        });
        tracker.add(widget);
    });
    registry.addWidgetFactory(widgetFactory);
    mainMenu.addMenu(createMenu(app), { rank: 30 });
    var commands = app.commands;
    commands.addCommand(cmdIds.lineNumbers, {
        execute: function () { toggleLineNums(); },
        label: 'Toggle Line Numbers',
    });
    commands.addCommand(cmdIds.lineWrap, {
        execute: function () { toggleLineWrap(); },
        label: 'Toggle Line Wrap',
    });
    commands.addCommand(cmdIds.matchBrackets, {
        execute: function () { toggleMatchBrackets(); },
        label: 'Toggle Match Brackets',
    });
    commands.addCommand(cmdIds.vimMode, {
        execute: function () { toggleVim(); },
        label: 'Toggle Vim Mode'
    });
    commands.addCommand(cmdIds.closeAll, {
        execute: function () { closeAllFiles(); },
        label: 'Close all files'
    });
    commands.addCommand(cmdIds.createConsole, {
        execute: function () {
            var widget = tracker.currentWidget;
            if (!widget) {
                return;
            }
            var options = {
                path: widget.context.path,
                preferredLanguage: widget.context.model.defaultKernelLanguage
            };
            commands.execute('console:create', options).then(function (id) {
                sessionIdProperty.set(widget, id);
            });
        },
        label: 'Create Console for Editor'
    });
    commands.addCommand(cmdIds.runCode, {
        execute: function () {
            var widget = tracker.currentWidget;
            if (!widget) {
                return;
            }
            // Get the session id.
            var id = sessionIdProperty.get(widget);
            if (!id) {
                return;
            }
            // Get the selected code from the editor.
            var doc = widget.editor.getDoc();
            var code = doc.getSelection();
            if (!code) {
                var line = doc.getCursor().line;
                code = doc.getLine(line);
            }
            commands.execute('console:inject', { id: id, code: code });
        },
        label: 'Run Code',
    });
    [
        cmdIds.lineNumbers,
        cmdIds.lineWrap,
        cmdIds.matchBrackets,
        cmdIds.vimMode,
        cmdIds.closeAll,
        cmdIds.createConsole,
        cmdIds.runCode,
    ].forEach(function (command) { return palette.addItem({ command: command, category: 'Editor' }); });
    // Reload any editor widgets whose state has been stored.
    Promise.all([state.fetchNamespace(NAMESPACE), app.started])
        .then(function (_a) {
        var items = _a[0];
        var open = 'file-operations:open';
        items.forEach(function (item) { app.commands.execute(open, item.value); });
    });
    return tracker;
}
/**
 * An attached property for the session id associated with an editor widget.
 */
var sessionIdProperty = new properties_1.AttachedProperty({ name: 'sessionId' });
/**
 * Toggle editor line numbers
 */
function toggleLineNums() {
    if (tracker.currentWidget) {
        var editor = tracker.currentWidget.editor;
        editor.setOption('lineNumbers', !editor.getOption('lineNumbers'));
    }
}
/**
 * Toggle editor line wrap
 */
function toggleLineWrap() {
    if (tracker.currentWidget) {
        var editor = tracker.currentWidget.editor;
        editor.setOption('lineWrapping', !editor.getOption('lineWrapping'));
    }
}
/**
 * Toggle editor matching brackets
 */
function toggleMatchBrackets() {
    if (tracker.currentWidget) {
        var editor = tracker.currentWidget.editor;
        editor.setOption('matchBrackets', !editor.getOption('matchBrackets'));
    }
}
/**
 * Toggle the editor's vim mode
 */
function toggleVim() {
    tracker.forEach(function (widget) {
        var keymap = widget.editor.getOption('keyMap') === 'vim' ? 'default'
            : 'vim';
        widget.editor.setOption('keyMap', keymap);
    });
}
/**
 * Close all currently open text editor files
 */
function closeAllFiles() {
    tracker.forEach(function (widget) { widget.close(); });
}
/**
 * Create a menu for the editor.
 */
function createMenu(app) {
    var commands = app.commands, keymap = app.keymap;
    var settings = new menu_1.Menu({ commands: commands, keymap: keymap });
    var theme = new menu_1.Menu({ commands: commands, keymap: keymap });
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    menu.title.label = 'Editor';
    settings.title.label = 'Settings';
    theme.title.label = 'Theme';
    settings.addItem({ command: cmdIds.lineNumbers });
    settings.addItem({ command: cmdIds.lineWrap });
    settings.addItem({ command: cmdIds.matchBrackets });
    settings.addItem({ command: cmdIds.vimMode });
    commands.addCommand(cmdIds.changeTheme, {
        label: function (args) {
            return args['theme'];
        },
        execute: function (args) {
            var name = args['theme'] || widget_2.DEFAULT_CODEMIRROR_THEME;
            tracker.forEach(function (widget) { widget.editor.setOption('theme', name); });
        }
    });
    [
        'jupyter', 'default', 'abcdef', 'base16-dark', 'base16-light',
        'hopscotch', 'material', 'mbo', 'mdn-like', 'seti', 'the-matrix',
        'xq-light', 'zenburn'
    ].forEach(function (name) { return theme.addItem({
        command: 'editor:change-theme',
        args: { theme: name }
    }); });
    menu.addItem({ command: cmdIds.closeAll });
    menu.addItem({ type: 'separator' });
    menu.addItem({ type: 'submenu', menu: settings });
    menu.addItem({ type: 'submenu', menu: theme });
    return menu;
}
//# sourceMappingURL=plugin.js.map