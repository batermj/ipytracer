import { Contents, IKernel, IServiceManager, Kernel, Session } from 'jupyter-js-services';
import { IDisposable } from 'phosphor/lib/core/disposable';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Widget } from 'phosphor/lib/ui/widget';
import { IDocumentContext, IDocumentModel, IModelFactory } from '../docregistry';
/**
 * An implementation of a document context.
 *
 * This class is typically instantiated by the document manger.
 */
export declare class Context<T extends IDocumentModel> implements IDocumentContext<T> {
    /**
     * Construct a new document context.
     */
    constructor(options: Context.IOptions<T>);
    /**
     * A signal emitted when the kernel changes.
     */
    kernelChanged: ISignal<IDocumentContext<T>, IKernel>;
    /**
     * A signal emitted when the path changes.
     */
    pathChanged: ISignal<IDocumentContext<T>, string>;
    /**
     * A signal emitted when the model is saved or reverted.
     */
    contentsModelChanged: ISignal<IDocumentContext<T>, Contents.IModel>;
    /**
     * A signal emitted when the context is fully populated for the first time.
     */
    populated: ISignal<IDocumentContext<T>, void>;
    /**
     * A signal emitted when the context is disposed.
     */
    disposed: ISignal<IDocumentContext<T>, void>;
    /**
     * Get the model associated with the document.
     *
     * #### Notes
     * This is a read-only property
     */
    readonly model: T;
    /**
     * The current kernel associated with the document.
     *
     * #### Notes
     * This is a read-only propery.
     */
    readonly kernel: IKernel;
    /**
     * The current path associated with the document.
     */
    readonly path: string;
    /**
     * The current contents model associated with the document
     *
     * #### Notes
     * This is a read-only property.  The model will have an
     * empty `contents` field.
     */
    readonly contentsModel: Contents.IModel;
    /**
     * Get the kernel spec information.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly kernelspecs: Kernel.ISpecModels;
    /**
     * Test whether the context is fully populated.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly isPopulated: boolean;
    /**
     * Get the model factory name.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly factoryName: string;
    /**
     * Test whether the context has been disposed (read-only).
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources held by the context.
     */
    dispose(): void;
    /**
     * Change the current kernel associated with the document.
     */
    changeKernel(options: Kernel.IModel): Promise<IKernel>;
    /**
     * Set the path of the context.
     *
     * #### Notes
     * This is not intended to be called by the user.
     * It is assumed that the file has been renamed on the
     * contents manager prior to this operation.
     */
    setPath(value: string): void;
    /**
     * Save the document contents to disk.
     */
    save(): Promise<void>;
    /**
     * Save the document to a different path chosen by the user.
     */
    saveAs(): Promise<void>;
    /**
     * Revert the document contents to disk contents.
     */
    revert(): Promise<void>;
    /**
     * Create a checkpoint for the file.
     */
    createCheckpoint(): Promise<Contents.ICheckpointModel>;
    /**
     * Delete a checkpoint for the file.
     */
    deleteCheckpoint(checkpointID: string): Promise<void>;
    /**
     * Restore the file to a known checkpoint state.
     */
    restoreCheckpoint(checkpointID?: string): Promise<void>;
    /**
     * List available checkpoints for a file.
     */
    listCheckpoints(): Promise<Contents.ICheckpointModel[]>;
    /**
     * Get the list of running sessions.
     */
    listSessions(): Promise<Session.IModel[]>;
    /**
     * Resolve a relative url to a correct server path.
     */
    resolveUrl(url: string): string;
    /**
     * Add a sibling widget to the document manager.
     */
    addSibling(widget: Widget): IDisposable;
    /**
     * Start a session and set up its signals.
     */
    private _startSession(options);
    /**
     * Update our contents model, without the content.
     */
    private _updateContentsModel(model);
    /**
     * Handle a change to the running sessions.
     */
    private _onSessionsChanged(sender, models);
    /**
     * Handle an initial population.
     */
    private _populate();
    private _manager;
    private _opener;
    private _model;
    private _path;
    private _session;
    private _factory;
    private _saver;
    private _isPopulated;
    private _contentsModel;
}
/**
 * A namespace for `Context` statics.
 */
export declare namespace Context {
    /**
     * The options used to initialize a context.
     */
    interface IOptions<T extends IDocumentModel> {
        /**
         * A service manager instance.
         */
        manager: IServiceManager;
        /**
         * The model factory used to create the model.
         */
        factory: IModelFactory<T>;
        /**
         * The initial path of the file.
         */
        path: string;
        /**
         * An optional callback for opening sibling widgets.
         */
        opener?: (widget: Widget) => void;
    }
}
