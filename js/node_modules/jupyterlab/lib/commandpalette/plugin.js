/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
"use strict";
var disposable_1 = require('phosphor/lib/core/disposable');
var commandpalette_1 = require('phosphor/lib/ui/commandpalette');
var _1 = require('./');
/**
 * A thin wrapper around the `CommandPalette` class to conform with the
 * JupyterLab interface for the application-wide command palette.
 */
var Palette = (function () {
    /**
     * Create a palette instance.
     */
    function Palette(palette) {
        this._palette = null;
        this._palette = palette;
    }
    Object.defineProperty(Palette.prototype, "placeholder", {
        get: function () {
            return this._palette.inputNode.placeholder;
        },
        /**
         * The placeholder text of the command palette's search input.
         */
        set: function (placeholder) {
            this._palette.inputNode.placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate the command palette for user input.
     */
    Palette.prototype.activate = function () {
        this._palette.activate();
    };
    /**
     * Add a command item to the command palette.
     *
     * @param options - The options for creating the command item.
     *
     * @returns A disposable that will remove the item from the palette.
     */
    Palette.prototype.addItem = function (options) {
        var _this = this;
        var item = this._palette.addItem(options);
        return new disposable_1.DisposableDelegate(function () { return _this._palette.removeItem(item); });
    };
    return Palette;
}());
/**
 * The default commmand palette extension.
 */
exports.commandPaletteProvider = {
    id: 'jupyter.services.commandpalette',
    provides: _1.ICommandPalette,
    activate: activateCommandPalette,
    autoStart: true
};
/**
 * Activate the command palette.
 */
function activateCommandPalette(app) {
    var commands = app.commands, keymap = app.keymap;
    var palette = new commandpalette_1.CommandPalette({ commands: commands, keymap: keymap });
    palette.id = 'command-palette';
    palette.title.label = 'Commands';
    /**
     * Activate the command palette within the app shell (used as a command).
     */
    function activatePalette() {
        app.shell.activateLeft(palette.id);
        palette.activate();
    }
    /**
     * Hide the command palette within the app shell (used as a command).
     */
    function hidePalette() {
        if (!palette.isHidden) {
            app.shell.collapseLeft();
        }
    }
    /**
     * Toggle the command palette within the app shell (used as a command).
     */
    function togglePalette() {
        if (palette.isHidden) {
            activatePalette();
        }
        else {
            hidePalette();
        }
    }
    app.commands.addCommand('command-palette:activate', {
        execute: activatePalette,
        label: 'Activate Command Palette'
    });
    app.commands.addCommand('command-palette:hide', {
        execute: hidePalette,
        label: 'Hide Command Palette'
    });
    app.commands.addCommand('command-palette:toggle', {
        execute: togglePalette,
        label: 'Toggle Command Palette'
    });
    palette.inputNode.placeholder = "SEARCH";
    app.shell.addToLeftArea(palette);
    return new Palette(palette);
}
//# sourceMappingURL=plugin.js.map