// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var services_1 = require('@jupyterlab/services');
var menu_1 = require('phosphor/lib/ui/menu');
var commandpalette_1 = require('../commandpalette');
var dates_1 = require('../common/dates');
var instancetracker_1 = require('../common/instancetracker');
var docregistry_1 = require('../docregistry');
var filebrowser_1 = require('../filebrowser');
var inspector_1 = require('../inspector');
var mainmenu_1 = require('../mainmenu');
var rendermime_1 = require('../rendermime');
var services_2 = require('../services');
var statedb_1 = require('../statedb');
var index_1 = require('./index');
/**
 * The console widget tracker provider.
 */
exports.consoleTrackerProvider = {
    id: 'jupyter.services.console-tracker',
    provides: index_1.IConsoleTracker,
    requires: [
        services_2.IServiceManager,
        rendermime_1.IRenderMime,
        mainmenu_1.IMainMenu,
        inspector_1.IInspector,
        commandpalette_1.ICommandPalette,
        filebrowser_1.IPathTracker,
        index_1.ConsoleContent.IRenderer,
        statedb_1.IStateDB
    ],
    activate: activateConsole,
    autoStart: true
};
/**
 * The class name for all main area landscape tab icons.
 */
var LANDSCAPE_ICON_CLASS = 'jp-MainAreaLandscapeIcon';
/**
 * The class name for the console icon from the default theme.
 */
var CONSOLE_ICON_CLASS = 'jp-ImageCodeConsole';
/**
 * A regex for console names.
 */
var CONSOLE_REGEX = /^console-(\d)+-[0-9a-f]+$/;
/**
 * The console plugin state namespace.
 */
var NAMESPACE = 'consoles';
/**
 * The console panel instance tracker.
 */
var tracker = new instancetracker_1.InstanceTracker();
/**
 * Activate the console extension.
 */
function activateConsole(app, services, rendermime, mainMenu, inspector, palette, pathTracker, renderer, state) {
    var manager = services.sessions;
    var commands = app.commands, keymap = app.keymap;
    var category = 'Console';
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    menu.title.label = 'Console';
    var command;
    // Sync tracker and set the source of the code inspector.
    app.shell.currentChanged.connect(function (sender, args) {
        var widget = tracker.sync(args.newValue);
        if (widget) {
            inspector.source = widget.content.inspectionHandler;
        }
    });
    // Set the main menu title.
    menu.title.label = 'Console';
    command = 'console:create-new';
    commands.addCommand(command, {
        label: 'Start New Console',
        execute: function () {
            commands.execute('console:create', {});
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    command = 'console:clear';
    commands.addCommand(command, {
        label: 'Clear Cells',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.clear();
            }
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    command = 'console:run';
    commands.addCommand(command, {
        label: 'Run Cell',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.execute();
            }
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    command = 'console:run-forced';
    commands.addCommand(command, {
        label: 'Run Cell (forced)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.execute(true);
            }
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    command = 'console:linebreak';
    commands.addCommand(command, {
        label: 'Insert Line Break',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.insertLinebreak();
            }
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    command = 'console:interrupt-kernel';
    commands.addCommand(command, {
        label: 'Interrupt Kernel',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var kernel = current.content.session.kernel;
                if (kernel) {
                    kernel.interrupt();
                }
            }
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    var count = 0;
    command = 'console:create';
    commands.addCommand(command, {
        execute: function (args) {
            args = args || {};
            var name = "Console " + ++count;
            // If we get a session, use it.
            if (args.id) {
                return manager.ready.then(function () {
                    return manager.connectTo(args.id);
                }).then(function (session) {
                    name = session.path.split('/').pop();
                    name = "Console " + name.match(CONSOLE_REGEX)[1];
                    createConsole(session, name);
                    return session.id;
                });
            }
            // Find the correct path for the new session.
            // Use the given path or the cwd.
            var path = args.path || pathTracker.path;
            if (services_1.ContentsManager.extname(path)) {
                path = services_1.ContentsManager.dirname(path);
            }
            path = path + "/console-" + count + "-" + services_1.utils.uuid();
            // Get the kernel model.
            return manager.ready.then(function () {
                return getKernel(args, name);
            }).then(function (kernel) {
                if (!kernel) {
                    return;
                }
                // Start the session.
                var options = {
                    path: path,
                    kernelName: kernel.name,
                    kernelId: kernel.id
                };
                return manager.startNew(options).then(function (session) {
                    createConsole(session, name);
                    return session.id;
                });
            });
        }
    });
    command = 'console:inject';
    commands.addCommand(command, {
        execute: function (args) {
            var id = args['id'];
            tracker.find(function (widget) {
                if (widget.content.session.id === id) {
                    widget.content.inject(args['code']);
                    return true;
                }
            });
        }
    });
    command = 'console:open';
    commands.addCommand(command, {
        execute: function (args) {
            var id = args['id'];
            var widget = tracker.find(function (value) {
                if (value.content.session.id === id) {
                    return true;
                }
            });
            if (widget) {
                app.shell.activateMain(widget.id);
            }
            else {
                app.commands.execute('console:create', { id: id });
            }
        }
    });
    /**
     * Get the kernel given the create args.
     */
    function getKernel(args, name) {
        if (args.kernel) {
            return Promise.resolve(args.kernel);
        }
        return manager.ready.then(function () {
            var options = {
                name: name,
                specs: manager.specs,
                sessions: manager.running(),
                preferredLanguage: args.preferredLanguage || '',
                host: document.body
            };
            return docregistry_1.selectKernel(options);
        });
    }
    var id = 0; // The ID counter for notebook panels.
    /**
     * Create a console for a given session.
     *
     * #### Notes
     * The manager must be ready before calling this function.
     */
    function createConsole(session, name) {
        var panel = new index_1.ConsolePanel({
            session: session, rendermime: rendermime.clone(), renderer: renderer
        });
        var specs = manager.specs;
        var displayName = specs.kernelspecs[session.kernel.name].display_name;
        var captionOptions = {
            label: name,
            displayName: displayName,
            path: session.path,
            connected: new Date()
        };
        // If the console panel does not have an ID, assign it one.
        panel.id = panel.id || "console-" + ++id;
        panel.title.label = name;
        panel.title.caption = Private.caption(captionOptions);
        panel.title.icon = LANDSCAPE_ICON_CLASS + " " + CONSOLE_ICON_CLASS;
        panel.title.closable = true;
        app.shell.addToMainArea(panel);
        app.shell.activateMain(panel.id);
        // Update the caption of the tab with the last execution time.
        panel.content.executed.connect(function (sender, executed) {
            captionOptions.executed = executed;
            panel.title.caption = Private.caption(captionOptions);
        });
        // Update the caption of the tab when the kernel changes.
        panel.content.session.kernelChanged.connect(function () {
            var newName = panel.content.session.kernel.name;
            name = specs.kernelspecs[name].display_name;
            captionOptions.displayName = newName;
            captionOptions.connected = new Date();
            captionOptions.executed = null;
            panel.title.caption = Private.caption(captionOptions);
        });
        // Immediately set the inspector source to the current console.
        inspector.source = panel.content.inspectionHandler;
        // Add the console panel to the tracker.
        tracker.add(panel);
        // Add the console to the state database.
        var key = NAMESPACE + ":" + session.id;
        state.save(key, { id: session.id });
        // Remove the console from the state database on disposal.
        panel.disposed.connect(function () { state.remove(key); });
    }
    // Reload any consoles whose state has been stored.
    Promise.all([state.fetchNamespace(NAMESPACE), app.started])
        .then(function (_a) {
        var items = _a[0];
        items.forEach(function (item) {
            app.commands.execute('console:create', item.value).catch(function () {
                // Remove console from the state database if session does not exist.
                state.remove(NAMESPACE + ":" + item.id);
            });
        });
    });
    command = 'console:switch-kernel';
    commands.addCommand(command, {
        label: 'Switch Kernel',
        execute: function () {
            var current = tracker.currentWidget;
            if (!current) {
                return;
            }
            var widget = current.content;
            var session = widget.session;
            var lang = '';
            manager.ready.then(function () {
                var specs = manager.specs;
                if (session.kernel) {
                    lang = specs.kernelspecs[session.kernel.name].language;
                }
                var options = {
                    name: widget.parent.title.label,
                    specs: specs,
                    sessions: manager.running(),
                    preferredLanguage: lang,
                    kernel: session.kernel.model,
                    host: widget.parent.node
                };
                return docregistry_1.selectKernel(options);
            }).then(function (kernelId) {
                // If the user cancels, kernelId will be void and should be ignored.
                if (kernelId) {
                    return session.changeKernel(kernelId);
                }
            });
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: command });
    mainMenu.addMenu(menu, { rank: 50 });
    return tracker;
}
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * Generate a caption for a console's title.
     */
    function caption(options) {
        var label = options.label, path = options.path, displayName = options.displayName, connected = options.connected, executed = options.executed;
        var caption = (("Name: " + label + "\n") +
            ("Directory: " + services_1.ContentsManager.dirname(path) + "\n") +
            ("Kernel: " + displayName + "\n") +
            ("Connected: " + dates_1.dateTime(connected.toISOString())));
        if (executed) {
            caption += "\nLast Execution: " + dates_1.dateTime(executed.toISOString());
        }
        return caption;
    }
    Private.caption = caption;
})(Private || (Private = {}));
//# sourceMappingURL=plugin.js.map