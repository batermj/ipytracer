import { Session, nbformat } from '@jupyterlab/services';
import { Message } from 'phosphor/lib/core/messaging';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Token } from 'phosphor/lib/core/token';
import { Panel } from 'phosphor/lib/ui/panel';
import { Widget } from 'phosphor/lib/ui/widget';
import { CompleterWidget } from '../completer';
import { InspectionHandler } from '../inspector';
import { BaseCellWidget, CodeCellWidget, RawCellWidget } from '../notebook/cells';
import { EdgeLocation, ICellEditorWidget, ITextChange } from '../notebook/cells/editor';
import { IRenderMime } from '../rendermime';
import { IConsoleHistory } from './history';
import { IObservableVector } from '../common/observablevector';
/**
 * A widget containing a Jupyter console's content.
 *
 * #### Notes
 * The ConsoleContent class is intended to be used within a ConsolePanel
 * instance. Under most circumstances, it is not instantiated by user code.
 */
export declare class ConsoleContent extends Widget {
    /**
     * Construct a console content widget.
     */
    constructor(options: ConsoleContent.IOptions);
    /**
     * The list of content cells in the console.
     *
     * #### Notes
     * This list does not include the banner or the prompt for a console.
     */
    readonly cells: IObservableVector<BaseCellWidget>;
    readonly content: Panel;
    /**
     * A signal emitted when the console executes its prompt.
     */
    readonly executed: ISignal<this, Date>;
    /**
     * Get the inspection handler used by the console.
     */
    readonly inspectionHandler: InspectionHandler;
    readonly prompt: CodeCellWidget | null;
    /**
     * Get the session used by the console.
     */
    readonly session: Session.ISession;
    /**
     * Add a new cell to the content panel.
     *
     * @param cell - The cell widget being added to the content panel.
     *
     * #### Notes
     * This method is meant for use by outside classes that want to inject content
     * into a console. It is distinct from the `inject` method in that it requires
     * rendered code cell widgets and does not execute them.
     */
    addCell(cell: BaseCellWidget): void;
    /**
     * Clear the code cells.
     */
    clear(): void;
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Execute the current prompt.
     *
     * @param force - Whether to force execution without checking code
     * completeness.
     *
     * @param timeout - The length of time, in milliseconds, that the execution
     * should wait for the API to determine whether code being submitted is
     * incomplete before attempting submission anyway. The default value is `250`.
     */
    execute(force?: boolean, timeout?: number): Promise<void>;
    /**
     * Inject arbitrary code for the console to execute immediately.
     *
     * @param code - The code contents of the cell being injected.
     *
     * @returns A promise that indicates when the injected cell's execution ends.
     */
    inject(code: string): Promise<void>;
    /**
     * Insert a line break in the prompt.
     */
    insertLinebreak(): void;
    /**
     * Serialize the output.
     */
    serialize(): nbformat.ICodeCell[];
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the notebook panel's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Handle `after_attach` messages for the widget.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before_detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle `'activate-request'` messages.
     */
    protected onActivateRequest(msg: Message): void;
    /**
     * Make a new prompt.
     */
    protected newPrompt(): void;
    /**
     * Handle an edge requested signal.
     */
    protected onEdgeRequest(editor: ICellEditorWidget, location: EdgeLocation): Promise<void>;
    /**
     * Handle a text change signal from the editor.
     */
    protected onTextChange(editor: ICellEditorWidget, args: ITextChange): void;
    /**
     * Handle `update-request` messages.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'keydown'` event for the widget.
     */
    private _evtKeyDown(event);
    /**
     * Handle kernel change events on the session.
     */
    private _addSessionListeners();
    /**
     * Initialize the banner and mimetype.
     */
    private _initialize();
    /**
     * Execute the code in the current prompt.
     */
    private _execute(cell);
    /**
     * Update the console based on the kernel info.
     */
    private _handleInfo(info);
    /**
     * Create a new completer widget if necessary and initialize it.
     */
    private _newCompleter(completer);
    /**
     * Create a new foreign cell.
     */
    private _newForeignCell();
    /**
     * Handle cell disposed signals.
     */
    private _onCellDisposed(sender, args);
    /**
     * Test whether we should execute the prompt.
     */
    private _shouldExecute(timeout);
    private _cells;
    private _completer;
    private _completerHandler;
    private _content;
    private _foreignHandler;
    private _history;
    private _input;
    private _inspectionHandler;
    private _listening;
    private _mimetype;
    private _renderer;
    private _rendermime;
    private _session;
    private _setByHistory;
}
/**
 * A namespace for ConsoleContent statics.
 */
export declare namespace ConsoleContent {
    /**
     * The initialization options for a console content widget.
     */
    interface IOptions {
        /**
         * The completer widget for a console content widget.
         */
        completer?: CompleterWidget;
        /**
         * The history manager for a console content widget.
         */
        history?: IConsoleHistory;
        /**
         * The renderer for a console content widget.
         */
        renderer: IRenderer;
        /**
         * The mime renderer for the console content widget.
         */
        rendermime: IRenderMime;
        /**
         * The session for the console content widget.
         */
        session: Session.ISession;
    }
    /**
     * A renderer for completer widget nodes.
     */
    interface IRenderer {
        /**
         * Create a new banner widget.
         */
        createBanner(): RawCellWidget;
        /**
         * Create a new prompt widget.
         */
        createPrompt(rendermime: IRenderMime, context: ConsoleContent): CodeCellWidget;
        /**
         * Create a code cell whose input originated from a foreign session.
         */
        createForeignCell(rendermine: IRenderMime, context: ConsoleContent): CodeCellWidget;
        /**
         * Get the preferred mimetype given language info.
         */
        getCodeMimetype(info: nbformat.ILanguageInfoMetadata): string;
    }
    /**
     * The console renderer token.
     */
    const IRenderer: Token<IRenderer>;
}
