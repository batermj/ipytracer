// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var panel_1 = require('phosphor/lib/ui/panel');
var content_1 = require('./content');
/**
 * The class name added to console panels.
 */
var PANEL_CLASS = 'jp-ConsolePanel';
/**
 * A panel which contains a console and the ability to add other children.
 */
var ConsolePanel = (function (_super) {
    __extends(ConsolePanel, _super);
    /**
     * Construct a console panel.
     */
    function ConsolePanel(options) {
        _super.call(this);
        this._content = null;
        this.addClass(PANEL_CLASS);
        // Create console content widget.
        this._content = options.content || new content_1.ConsoleContent({
            session: options.session,
            rendermime: options.rendermime,
            renderer: options.renderer
        });
        this.addWidget(this._content);
    }
    Object.defineProperty(ConsolePanel.prototype, "content", {
        /**
         * The console widget used by the panel.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the widget.
     */
    ConsolePanel.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        // Dispose console widget.
        this._content.dispose();
        this._content = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle `'activate-request'` messages.
     */
    ConsolePanel.prototype.onActivateRequest = function (msg) {
        this.content.activate();
    };
    /**
     * Handle `'close-request'` messages.
     */
    ConsolePanel.prototype.onCloseRequest = function (msg) {
        _super.prototype.onCloseRequest.call(this, msg);
        this.dispose();
    };
    return ConsolePanel;
}(panel_1.Panel));
exports.ConsolePanel = ConsolePanel;
//# sourceMappingURL=panel.js.map