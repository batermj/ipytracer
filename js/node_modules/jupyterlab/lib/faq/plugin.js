// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var vdom_1 = require('phosphor/lib/ui/vdom');
var commandpalette_1 = require('../commandpalette');
var vdom_2 = require('../common/vdom');
/**
 * The faq page extension.
 */
exports.faqExtension = {
    id: 'jupyter.extensions.faq',
    requires: [commandpalette_1.ICommandPalette],
    activate: activateFAQ,
    autoStart: true
};
/**
 * The class name added to the FAQ plugin.
 */
var FAQ_CLASS = 'jp-FAQ';
/**
 * The id name added to the header section element.
 */
var HEADER_ID = 'faq-header';
/**
 * The class name added to the title.
 */
var TITLE_CLASS = 'jp-FAQ-title';
/**
 * The class name added to h1 elements.
 */
var HEADER_CLASS = 'jp-FAQ-h1';
/**
 * The class name added to h2 elements.
 */
var SUBHEADER_CLASS = 'jp-FAQ-h2';
/**
 * The class name added for the question mark icon from default-theme.
 */
var QUESTIONMARK_ICON_CLASS = 'jp-QuestionMark';
/**
 * The class named added the question mark icon.
 */
var QUESTIONMARK_CLASS = 'jp-FAQ-QuestionMark';
/**
 * The class name added to faq content.
 */
var CONTENT_CLASS = 'jp-FAQ-content';
/**
 * The class name added to unordered list elements.
 */
var FAQ_LIST_CLASS = 'jp-FAQ-ul';
/**
 * The class name added to table of contents elements.
 */
var TOC_CLASS = 'jp-FAQ-toc';
/**
 * The class name added to questions.
 */
var QUESTION_CLASS = 'jp-FAQ-question';
/**
 * The class name added to answers.
 */
var ANSWER_CLASS = 'jp-FAQ-answer';
/**
 * The class name added to anchor elements.
 */
var ANCHOR_CLASS = 'jp-FAQ-a';
/**
 * FaqModel holds data which the FaqWidget will render.
 */
var FaqModel = (function (_super) {
    __extends(FaqModel, _super);
    /**
     * Construct a new faq model.
     */
    function FaqModel() {
        _super.call(this);
        this.title = 'Frequently Asked Questions';
        this.subHeadings = [
            'THE BASICS',
            'FEATURES',
            'DEVELOPER'
        ];
        this.basicsQuestions = [
            'What is JupyterLab?',
            'What is a Jupyter Notebook?',
            'How stable is JupyterLab?',
            'I\'m confused with the interface. How do I navigate around JupyterLab?'
        ];
        this.featuresQuestions = [
            'How do I add more kernels/languages to JupyterLab?',
            'How can I share my notebooks?'
        ];
        this.developerQuestions = [
            'How do I report a bug?',
            'I have security concerns about JupyterLab.',
            'How can I contribute?'
        ];
    }
    return FaqModel;
}(vdom_2.VDomModel));
/**
 * A virtual-DOM-based widget for the FAQ plugin.
 */
var FaqWidget = (function (_super) {
    __extends(FaqWidget, _super);
    /**
     * Construct a new faq widget.
     */
    function FaqWidget(app) {
        _super.call(this);
        this._app = app;
        this.addClass(FAQ_CLASS);
    }
    /**
     * Render the faq plugin to virtual DOM nodes.
     */
    FaqWidget.prototype.render = function () {
        var _this = this;
        var subHeadings = this.model.subHeadings;
        var basicsQuestions = this.model.basicsQuestions;
        var featuresQuestions = this.model.featuresQuestions;
        var developerQuestions = this.model.developerQuestions;
        // Create Frequently Asked Questions Header Section.
        var faqHeader = vdom_1.h.section({ id: HEADER_ID }, vdom_1.h.span({ className: QUESTIONMARK_ICON_CLASS + ' ' + QUESTIONMARK_CLASS }), vdom_1.h.h1({ className: HEADER_CLASS }, vdom_1.h.span({ className: TITLE_CLASS }, this.model.title)));
        // Create a section element that holds Table of Contents.
        var questionList = vdom_1.h.section({ className: CONTENT_CLASS }, vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[0]), vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#basicsQ1' }, basicsQuestions[0])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#basicsQ2' }, basicsQuestions[1])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#basicsQ3' }, basicsQuestions[2])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#basicsQ4' }, basicsQuestions[3]))), vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[1]), vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#featuresQ1' }, featuresQuestions[0])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#featuresQ2' }, featuresQuestions[1]))), vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[2]), vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#developerQ1' }, developerQuestions[0])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#developerQ2' }, developerQuestions[1])), vdom_1.h.li({ className: QUESTION_CLASS + ' ' + TOC_CLASS }, vdom_1.h.a({ href: '#developerQ3' }, developerQuestions[2]))));
        // Create a section element that all other FAQ Content will go under.
        var questionAnswerList = vdom_1.h.section({ className: CONTENT_CLASS }, vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[0]), 
        // Create list of questions/answers under the Basics section.
        vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS, id: 'basicsQ1' }, basicsQuestions[0]), vdom_1.h.li({ className: ANSWER_CLASS }, 'JupyterLab allows users to arrange multiple Jupyter notebooks, '
            + 'text editors, terminals, output areas, etc. on a single page with multiple '
            + 'panels and tabs into one application. The codebase and UI of JupyterLab '
            + 'is based on a flexible plugin system that makes it easy to extend '
            + 'with new components.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'basicsQ2' }, basicsQuestions[1]), vdom_1.h.li({ className: ANSWER_CLASS }, 'Central to the project is the Jupyter Notebook, a web-based '
            + 'platform that allows users to combine live code, equations, narrative '
            + 'text, visualizations, interactive dashboards and other media. Together '
            + 'these building blocks make science and data reproducible across over '
            + '40 programming languages and combine to form what we call a computational '
            + 'narrative.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'basicsQ3' }, basicsQuestions[2]), vdom_1.h.li({ className: ANSWER_CLASS }, 'JupyterLab is currently in a alpha release and not ready for public use '
            + 'as new features and bug fixes are being added very frequently. We strongly '
            + 'recommend to backup your work before using JupyterLab. However, testing, '
            + 'development, and user feedback are greatly appreciated.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'basicsQ4' }, basicsQuestions[3]), vdom_1.h.li({ className: ANSWER_CLASS }, 'Check out the JupyterLab tour ', vdom_1.h.a({ className: ANCHOR_CLASS,
            onclick: function () {
                _this._app.commands.execute('about-jupyterlab:show', void 0);
            } }, 'here'))), vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[1]), 
        // Create list of questions/answers under the Features section.
        vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS, id: 'featuresQ1' }, featuresQuestions[0]), vdom_1.h.li({ className: ANSWER_CLASS }, 'To add more languages to the JupyterLab you must install '
            + 'a new kernel. Installing a kernel is usually fairly simple and can be '
            + 'done with a couple terminal commands. However the instructions for installing '
            + 'kernels is different for each language. For further instructions, click ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'https://jupyter.readthedocs.io/en/latest/install-kernel.html',
            target: '_blank' }, 'this'), ' link.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'featuresQ2' }, featuresQuestions[1]), vdom_1.h.li({ className: ANSWER_CLASS }, 'You can either publish your notebooks on GitHub or use a free service such as ', vdom_1.h.a({ className: ANCHOR_CLASS, href: 'https://nbviewer.jupyter.org/', target: '_blank' }, 'nbviewer.org'), ' to render your notebooks online.')), vdom_1.h.h2({ className: SUBHEADER_CLASS }, subHeadings[2]), 
        // Create list of questions/answers under the Developer section.
        vdom_1.h.ul({ className: FAQ_LIST_CLASS }, vdom_1.h.li({ className: QUESTION_CLASS, id: 'developerQ1' }, developerQuestions[0]), vdom_1.h.li({ className: ANSWER_CLASS }, 'You can open an issue on our ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'https://github.com/jupyterlab/jupyterlab/issues',
            target: '_blank' }, 'github repository'), '. Please check already opened issues before posting.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'developerQ2' }, developerQuestions[1]), vdom_1.h.li({ className: ANSWER_CLASS }, 'If you have any inquiries, concerns, or thought you found a security '
            + 'vulnerability, please write to use at ', vdom_1.h.a({ className: ANCHOR_CLASS, href: 'mailto:security@jupyter.org' }, 'security@jupyter.org'), '. We will do our best to repond to you promptly.'), vdom_1.h.li({ className: QUESTION_CLASS, id: 'developerQ3' }, developerQuestions[2]), vdom_1.h.li({ className: ANSWER_CLASS }, 'There are many ways to contribute to JupyterLab. '
            + 'Whether you are an experienced python programmer or a newcomer, any '
            + 'interested developers are welcome. You can learn about the JupyterLab '
            + 'codebase by going through our ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'https://jupyterlab-tutorial.readthedocs.io/en/latest/index.html',
            target: '_blank' }, 'tutorial walkthrough'), ' and ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'https://jupyterlab.github.io/jupyterlab/',
            target: '_blank' }, 'documentation'), '. Also, feel free to ask questions on our ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'https://github.com/jupyterlab/jupyterlab',
            target: '_blank' }, 'github'), ' or through any of our ', vdom_1.h.a({ className: ANCHOR_CLASS,
            href: 'http://jupyter.org/community.html',
            target: '_blank' }, 'community resources'), '.')));
        var domTree = [faqHeader, questionList, questionAnswerList];
        return domTree;
    };
    return FaqWidget;
}(vdom_2.VDomWidget));
/**
 * Activate the faq plugin.
 */
function activateFAQ(app, palette) {
    var faqModel = new FaqModel();
    var widget = new FaqWidget(app);
    var commandId = 'faq-jupyterlab:show';
    widget.model = faqModel;
    widget.id = 'faq-jupyterlab';
    widget.title.label = 'FAQ';
    widget.title.closable = true;
    widget.node.style.overflowY = 'auto';
    app.commands.addCommand(commandId, {
        label: 'Frequently Asked Questions',
        execute: function () {
            if (!widget.isAttached) {
                app.shell.addToMainArea(widget);
            }
            app.shell.activateMain(widget.id);
        }
    });
    palette.addItem({ command: commandId, category: 'Help' });
}
//# sourceMappingURL=plugin.js.map