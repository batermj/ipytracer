// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
/**
 * A class that allows scrolling within a drag node.
 */
var DragScrollHandler = (function () {
    /**
     * Construct a new scroll handler.
     */
    function DragScrollHandler(options) {
        this._scrollInterval = -1;
        this._isScrolling = false;
        this._scrollAmount = 0;
        this._edgeDistance = -1;
        this._maxSpeed = -1;
        this._node = options.node;
        this._edgeDistance = options.edgeDistance || 30;
        this._maxSpeed = options.maxSpeed || 20;
    }
    /**
     * Handle scrolling for drag events.
     *
     * @param event - The drag event.
     *
     * #### Notes
     * This should be called for all handled drag events during a drag operation
     * on the node.
     */
    DragScrollHandler.prototype.handleDragEvent = function (event) {
        switch (event.type) {
            case 'p-dragleave':
                if (!this._node.contains(event.relatedTarget)) {
                    this._clear();
                }
                break;
            case 'p-dragover':
                this._handleDragOver(event);
                break;
            case 'p-drop':
                this._clear();
                break;
            default:
                break;
        }
    };
    /**
     * Handle a `'p-dragover'` event.
     */
    DragScrollHandler.prototype._handleDragOver = function (event) {
        var _this = this;
        var yPos = event.clientY;
        var node = this._node;
        var rect = node.getBoundingClientRect();
        var maxSpeed = this._maxSpeed;
        var edgeDistance = this._edgeDistance;
        var distanceFromTop = yPos - rect.top;
        var distanceFromBottom = rect.top + rect.height - yPos;
        // Step 1: Enable/disable scrolling.
        if ((distanceFromTop <= edgeDistance ||
            distanceFromBottom <= edgeDistance) &&
            !this._isScrolling) {
            // Activate scrolling.
            this._isScrolling = true;
            this._scrollAmount = 0;
            // Update at 60fps.
            this._scrollInterval = setInterval(function () {
                if (_this._scrollAmount === 0) {
                    return;
                }
                var prev = node.scrollTop;
                node.scrollTop += _this._scrollAmount;
                if (node.scrollTop === prev) {
                    _this._clear();
                }
            }, 16);
        }
        else if (distanceFromTop > edgeDistance &&
            distanceFromBottom > edgeDistance &&
            this._isScrolling) {
            // Deactivate scrolling.
            this._clear();
        }
        // Step 2: Set scrolling speed.
        if (this._isScrolling) {
            // Scrolling is happening so compute the scroll speed.
            var direction = 1; // Default to scroll down.
            var distance = distanceFromBottom;
            if (distanceFromTop <= edgeDistance) {
                direction = -1; // Scroll up.
                distance = distanceFromTop;
            }
            var ratio = distance / edgeDistance;
            this._scrollAmount = direction * Math.min(1, 1 - ratio) * maxSpeed;
        }
    };
    /**
     * Clear the scroll state.
     */
    DragScrollHandler.prototype._clear = function () {
        clearInterval(this._scrollInterval);
        this._isScrolling = false;
    };
    return DragScrollHandler;
}());
exports.DragScrollHandler = DragScrollHandler;
//# sourceMappingURL=dragscroll.js.map