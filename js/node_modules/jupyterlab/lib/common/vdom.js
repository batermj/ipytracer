// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var signaling_1 = require('phosphor/lib/core/signaling');
var widget_1 = require('phosphor/lib/ui/widget');
var vdom_1 = require('phosphor/lib/ui/vdom');
/**
 * Concrete implementation of IVDomModel.
 */
var VDomModel = (function () {
    function VDomModel() {
        this._isDisposed = false;
    }
    /**
     * Dispose the model.
     */
    VDomModel.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.clearSignalData(this);
    };
    Object.defineProperty(VDomModel.prototype, "isDisposed", {
        /**
         * Test whether the model is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    return VDomModel;
}());
exports.VDomModel = VDomModel;
// Define the signals for the VDomModel class.
signaling_1.defineSignal(VDomModel.prototype, 'stateChanged');
/**
 * Phosphor widget that encodes best practices for VDOM based rendering.
 */
var VDomWidget = (function (_super) {
    __extends(VDomWidget, _super);
    function VDomWidget() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(VDomWidget.prototype, "model", {
        /**
         * Get the current model.
         */
        get: function () {
            return this._model;
        },
        /**
         * Set the model and fire changed signals.
         */
        set: function (newValue) {
            newValue = newValue || null;
            if (this._model === newValue) {
                return;
            }
            if (this._model) {
                this._model.stateChanged.disconnect(this.update, this);
            }
            this._model = newValue;
            this._model.stateChanged.connect(this.update, this);
            this.update();
            this.modelChanged.emit(void 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VDomWidget.prototype, "isDisposed", {
        /**
         * Test whether the widget is disposed.
         */
        get: function () {
            return this._model === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose this widget.
     */
    VDomWidget.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._model = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Called to update the state of the widget.
     *
     * The default implementation of this method triggers
     * VDOM based rendering by calling the this.render() method.
     */
    VDomWidget.prototype.onUpdateRequest = function (msg) {
        var vnode = this.render();
        vdom_1.render(vnode, this.node);
    };
    return VDomWidget;
}(widget_1.Widget));
exports.VDomWidget = VDomWidget;
// Define the signal for the VDomWidget class.
signaling_1.defineSignal(VDomWidget.prototype, 'modelChanged');
//# sourceMappingURL=vdom.js.map