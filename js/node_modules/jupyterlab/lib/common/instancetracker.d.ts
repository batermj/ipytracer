import { IDisposable } from 'phosphor/lib/core/disposable';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Widget } from 'phosphor/lib/ui/widget';
/**
 * An object that tracks widget instances.
 */
export interface IInstanceTracker<T extends Widget> {
    /**
     * A signal emitted when the current widget changes.
     *
     * #### Notes
     * If the last widget being tracked is disposed, `null` will be emitted.
     */
    currentChanged: ISignal<this, T>;
    /**
     * The current widget is the most recently focused widget.
     */
    currentWidget: T;
}
/**
 * A class that keeps track of widget instances.
 *
 * #### Notes
 * This is meant to be used in conjunction with a `FocusTracker` and will
 * typically be kept in sync with focus tracking events.
 */
export declare class InstanceTracker<T extends Widget> implements IInstanceTracker<T>, IDisposable {
    /**
     * A signal emitted when the current widget changes.
     *
     * #### Notes
     * If the last widget being tracked is disposed, `null` will be emitted.
     */
    readonly currentChanged: ISignal<this, T>;
    /**
     * The current widget is the most recently focused widget.
     */
    readonly currentWidget: T;
    /**
     * Test whether the tracker is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Add a new widget to the tracker.
     */
    add(widget: T): void;
    /**
     * Dispose of the resources held by the tracker.
     */
    dispose(): void;
    /**
     * Find the first widget in the tracker that satisfies a filter function.
     *
     * @param fn The filter function to call on each widget.
     */
    find(fn: (widget: T) => boolean): T;
    /**
     * Iterate through each widget in the tracker.
     *
     * @param fn The function to call on each widget.
     */
    forEach(fn: (widget: T) => void): void;
    /**
     * Check if this tracker has the specified widget.
     */
    has(widget: Widget): boolean;
    /**
     * Syncs the state of the tracker with a widget known to have focus.
     *
     * @param current The currently focused widget.
     *
     * @returns The current widget or `null` if there is none.
     *
     * #### Notes
     * Syncing acts as a gate returning a widget only if it is the current widget.
     */
    sync(current: Widget): T;
    /**
     * Handle the current change event.
     *
     * #### Notes
     * The default implementation is a no-op. This may be reimplemented by
     * subclasses to customize the behavior.
     */
    protected onCurrentChanged(): void;
    private _currentWidget;
    private _widgets;
}
