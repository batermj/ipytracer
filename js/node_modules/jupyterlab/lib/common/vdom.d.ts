import { IDisposable } from 'phosphor/lib/core/disposable';
import { Message } from 'phosphor/lib/core/messaging';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Widget } from 'phosphor/lib/ui/widget';
import { VNode } from 'phosphor/lib/ui/vdom';
/**
 * An interface for a model to be used with vdom rendering.
 */
export interface IVDomModel extends IDisposable {
    /**
     * A signal emited when any model state changes.
     */
    stateChanged: ISignal<IVDomModel, void>;
}
/**
 * Concrete implementation of IVDomModel.
 */
export declare class VDomModel implements IVDomModel {
    /**
     * A signal emitted when any model state changes.
     */
    stateChanged: ISignal<this, void>;
    /**
     * Dispose the model.
     */
    dispose(): void;
    /**
     * Test whether the model is disposed.
     */
    readonly isDisposed: boolean;
    private _isDisposed;
}
/**
 * Phosphor widget that encodes best practices for VDOM based rendering.
 */
export declare abstract class VDomWidget<T extends IVDomModel> extends Widget {
    /**
     * A signal emited when the model changes.
     */
    modelChanged: ISignal<this, void>;
    /**
     * Get the current model.
     */
    /**
     * Set the model and fire changed signals.
     */
    model: T;
    /**
     * Test whether the widget is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose this widget.
     */
    dispose(): void;
    /**
     * Called to update the state of the widget.
     *
     * The default implementation of this method triggers
     * VDOM based rendering by calling the this.render() method.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Render the content of this widget using the virtial DOM.
     *
     * This method will be called anytime the widget needs to be rendered,
     * which includes layout triggered rendering and all model changes.
     *
     * Subclasses should define this method and use the current model state
     * in this.model and return a phosphor VNode or VNode[] using the phosphor
     * VDOM API.
     */
    protected abstract render(): VNode | VNode[];
    private _model;
}
