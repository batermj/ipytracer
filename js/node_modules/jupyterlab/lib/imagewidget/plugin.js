// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var commandpalette_1 = require('../commandpalette');
var instancetracker_1 = require('../common/instancetracker');
var docregistry_1 = require('../docregistry');
var widget_1 = require('./widget');
/**
 * The image widget instance tracker.
 */
var tracker = new instancetracker_1.InstanceTracker();
/**
 * The list of file extensions for images.
 */
var EXTENSIONS = ['.png', '.gif', '.jpeg', '.jpg', '.svg', '.bmp', '.ico',
    '.xbm', '.tiff', '.tif'];
/**
 * The image file handler extension.
 */
exports.imageHandlerExtension = {
    id: 'jupyter.extensions.image-handler',
    requires: [docregistry_1.IDocumentRegistry, commandpalette_1.ICommandPalette],
    activate: activateImageWidget,
    autoStart: true
};
/**
 * Activate the image widget extension.
 */
function activateImageWidget(app, registry, palette) {
    var zoomInImage = 'image-widget:zoom-in';
    var zoomOutImage = 'image-widget:zoom-out';
    var resetZoomImage = 'image-widget:reset-zoom';
    var image = new widget_1.ImageWidgetFactory({
        name: 'Image',
        modelName: 'base64',
        fileExtensions: EXTENSIONS,
        defaultFor: EXTENSIONS
    });
    // Sync tracker with currently focused widget.
    app.shell.currentChanged.connect(function (sender, args) {
        tracker.sync(args.newValue);
    });
    registry.addWidgetFactory(image);
    image.widgetCreated.connect(function (sender, newWidget) {
        tracker.add(newWidget);
    });
    app.commands.addCommand(zoomInImage, {
        execute: zoomIn,
        label: 'Zoom In'
    });
    app.commands.addCommand(zoomOutImage, {
        execute: zoomOut,
        label: 'Zoom Out'
    });
    app.commands.addCommand(resetZoomImage, {
        execute: resetZoom,
        label: 'Reset Zoom'
    });
    var category = 'Image Widget';
    [zoomInImage, zoomOutImage, resetZoomImage]
        .forEach(function (command) { return palette.addItem({ command: command, category: category }); });
    function zoomIn() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        if (widget.scale > 1) {
            widget.scale += .5;
        }
        else {
            widget.scale *= 2;
        }
    }
    function zoomOut() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        if (widget.scale > 1) {
            widget.scale -= .5;
        }
        else {
            widget.scale /= 2;
        }
    }
    function resetZoom() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        widget.scale = 1;
    }
}
//# sourceMappingURL=plugin.js.map