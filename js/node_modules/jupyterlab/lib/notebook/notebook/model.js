// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var services_1 = require('@jupyterlab/services');
var iteration_1 = require('phosphor/lib/algorithm/iteration');
var json_1 = require('phosphor/lib/algorithm/json');
var iteration_2 = require('phosphor/lib/algorithm/iteration');
var signaling_1 = require('phosphor/lib/core/signaling');
var docregistry_1 = require('../../docregistry');
var model_1 = require('../cells/model');
var metadata_1 = require('../common/metadata');
var undo_1 = require('../common/undo');
/**
 * An implementation of a notebook Model.
 */
var NotebookModel = (function (_super) {
    __extends(NotebookModel, _super);
    /**
     * Construct a new notebook model.
     */
    function NotebookModel(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        _super.call(this, options.languagePreference);
        this._cells = null;
        this._factory = null;
        this._metadata = Private.createMetadata();
        this._cursors = Object.create(null);
        this._nbformat = services_1.nbformat.MAJOR_VERSION;
        this._nbformatMinor = services_1.nbformat.MINOR_VERSION;
        this._factory = options.factory || NotebookModel.defaultFactory;
        this._cells = new undo_1.ObservableUndoableVector(function (data) {
            switch (data.cell_type) {
                case 'code':
                    return _this._factory.createCodeCell(data);
                case 'markdown':
                    return _this._factory.createMarkdownCell(data);
                default:
                    return _this._factory.createRawCell(data);
            }
        });
        // Add an initial code cell by default.
        this._cells.pushBack(this._factory.createCodeCell());
        this._cells.changed.connect(this._onCellsChanged, this);
        if (options.languagePreference) {
            this._metadata['language_info'] = { name: options.languagePreference };
        }
    }
    Object.defineProperty(NotebookModel.prototype, "cells", {
        /**
         * Get the observable list of notebook cells.
         */
        get: function () {
            return this._cells;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookModel.prototype, "factory", {
        /**
         * The cell model factory for the notebook.
         */
        get: function () {
            return this._factory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookModel.prototype, "nbformat", {
        /**
         * The major version number of the nbformat.
         */
        get: function () {
            return this._nbformat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookModel.prototype, "nbformatMinor", {
        /**
         * The minor version number of the nbformat.
         */
        get: function () {
            return this._nbformatMinor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookModel.prototype, "defaultKernelName", {
        /**
         * The default kernel name of the document.
         */
        get: function () {
            var spec = this._metadata['kernelspec'];
            return spec ? spec.name : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookModel.prototype, "defaultKernelLanguage", {
        /**
         * The default kernel language of the document.
         */
        get: function () {
            var info = this._metadata['language_info'];
            return info ? info.name : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the model.
     */
    NotebookModel.prototype.dispose = function () {
        // Do nothing if already disposed.
        if (this.isDisposed) {
            return;
        }
        var cells = this._cells;
        cells.dispose();
        signaling_1.clearSignalData(this);
        for (var i = 0; i < cells.length; i++) {
            var cell = cells.at(i);
            cell.dispose();
        }
        cells.clear();
        this._cells = null;
        for (var key in this._cursors) {
            this._cursors[key].dispose();
        }
        this._cursors = null;
        this._metadata = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Serialize the model to a string.
     */
    NotebookModel.prototype.toString = function () {
        return JSON.stringify(this.toJSON());
    };
    /**
     * Deserialize the model from a string.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    NotebookModel.prototype.fromString = function (value) {
        this.fromJSON(JSON.parse(value));
    };
    /**
     * Serialize the model to JSON.
     */
    NotebookModel.prototype.toJSON = function () {
        var cells = [];
        for (var i = 0; i < this.cells.length; i++) {
            var cell = this.cells.at(i);
            cells.push(cell.toJSON());
        }
        var metadata = services_1.utils.copy(this._metadata);
        return {
            metadata: metadata,
            nbformat_minor: this._nbformatMinor,
            nbformat: this._nbformat,
            cells: cells
        };
    };
    /**
     * Deserialize the model from JSON.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    NotebookModel.prototype.fromJSON = function (value) {
        var cells = [];
        for (var _i = 0, _a = value.cells; _i < _a.length; _i++) {
            var data = _a[_i];
            switch (data.cell_type) {
                case 'code':
                    cells.push(new model_1.CodeCellModel(data));
                    break;
                case 'markdown':
                    cells.push(new model_1.MarkdownCellModel(data));
                    break;
                case 'raw':
                    cells.push(new model_1.RawCellModel(data));
                    break;
                default:
                    continue;
            }
        }
        this.cells.beginCompoundOperation();
        this.cells.clear();
        this.cells.pushAll(cells);
        this.cells.endCompoundOperation();
        var oldValue = 0;
        var newValue = 0;
        if (value.nbformat !== this._nbformat) {
            oldValue = this._nbformat;
            this._nbformat = newValue = value.nbformat;
            this.stateChanged.emit({ name: 'nbformat', oldValue: oldValue, newValue: newValue });
        }
        if (value.nbformat_minor !== this._nbformatMinor) {
            oldValue = this._nbformat;
            this._nbformatMinor = newValue = value.nbformat_minor;
            this.stateChanged.emit({ name: 'nbformatMinor', oldValue: oldValue, newValue: newValue });
        }
        // Update the metadata.
        var metadata = value.metadata;
        var builtins = ['kernelspec', 'language_info', 'orig_nbformat'];
        for (var key in this._metadata) {
            if (builtins.indexOf(key) !== -1) {
                continue;
            }
            if (!(key in metadata)) {
                this._setCursorData(key, null);
                delete this._metadata[key];
                if (this._cursors[key]) {
                    this._cursors[key].dispose();
                    delete this._cursors[key];
                }
            }
        }
        for (var key in metadata) {
            this._setCursorData(key, metadata[key]);
        }
        this.dirty = true;
    };
    /**
     * Get a metadata cursor for the notebook.
     *
     * #### Notes
     * Metadata associated with the nbformat spec are set directly
     * on the model.  This method is used to interact with a namespaced
     * set of metadata on the notebook.
     */
    NotebookModel.prototype.getMetadata = function (name) {
        var _this = this;
        if (name in this._cursors) {
            return this._cursors[name];
        }
        var cursor = new metadata_1.MetadataCursor(name, function () {
            return _this._metadata[name];
        }, function (value) {
            _this._setCursorData(name, value);
        });
        this._cursors[name] = cursor;
        return cursor;
    };
    /**
     * List the metadata namespace keys for the notebook.
     */
    NotebookModel.prototype.listMetadata = function () {
        return iteration_2.iter(Object.keys(this._metadata));
    };
    /**
     * Set the cursor data for a given field.
     */
    NotebookModel.prototype._setCursorData = function (name, newValue) {
        var oldValue = this._metadata[name];
        if (json_1.deepEqual(oldValue, newValue)) {
            return;
        }
        this._metadata[name] = newValue;
        this.dirty = true;
        this.contentChanged.emit(void 0);
        this.metadataChanged.emit({ name: name, oldValue: oldValue, newValue: newValue });
    };
    /**
     * Handle a change in the cells list.
     */
    NotebookModel.prototype._onCellsChanged = function (list, change) {
        var _this = this;
        switch (change.type) {
            case 'add':
                iteration_1.each(change.newValues, function (cell) {
                    cell.contentChanged.connect(_this._onCellChanged, _this);
                });
                break;
            case 'remove':
                iteration_1.each(change.oldValues, function (cell) {
                    cell.dispose();
                });
                break;
            case 'set':
                iteration_1.each(change.newValues, function (cell) {
                    cell.contentChanged.connect(_this._onCellChanged, _this);
                });
                iteration_1.each(change.oldValues, function (cell) {
                    cell.dispose();
                });
                break;
            default:
                return;
        }
        // Add code cell if there are no cells remaining.
        if (!this._cells.length) {
            // Add the cell in a new context to avoid triggering another
            // cell changed event during the handling of this signal.
            requestAnimationFrame(function () {
                if (!_this.isDisposed && !_this._cells.length) {
                    _this._cells.pushBack(_this._factory.createCodeCell());
                }
            });
        }
        this.contentChanged.emit(void 0);
        this.dirty = true;
    };
    /**
     * Handle a change to a cell state.
     */
    NotebookModel.prototype._onCellChanged = function (cell, change) {
        this.dirty = true;
        this.contentChanged.emit(void 0);
    };
    return NotebookModel;
}(docregistry_1.DocumentModel));
exports.NotebookModel = NotebookModel;
// Define the signals for the `NotebookModel` class.
signaling_1.defineSignal(NotebookModel.prototype, 'metadataChanged');
/**
 * The namespace for the `NotebookModel` class statics.
 */
var NotebookModel;
(function (NotebookModel) {
    /**
     * The default implementation of an `ICellModelFactory`.
     */
    var Factory = (function () {
        function Factory() {
        }
        /**
         * Create a new code cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new code cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        Factory.prototype.createCodeCell = function (source) {
            return new model_1.CodeCellModel(source);
        };
        /**
         * Create a new markdown cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new markdown cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        Factory.prototype.createMarkdownCell = function (source) {
            return new model_1.MarkdownCellModel(source);
        };
        /**
         * Create a new raw cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new raw cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        Factory.prototype.createRawCell = function (source) {
            return new model_1.RawCellModel(source);
        };
        return Factory;
    }());
    NotebookModel.Factory = Factory;
    /**
     * The default `Factory` instance.
     */
    NotebookModel.defaultFactory = new Factory();
})(NotebookModel = exports.NotebookModel || (exports.NotebookModel = {}));
/**
 * A private namespace for notebook model data.
 */
var Private;
(function (Private) {
    /**
     * Create the default metadata for the notebook.
     */
    function createMetadata() {
        return {
            kernelspec: { name: '', display_name: '' },
            language_info: { name: '' },
            orig_nbformat: 1
        };
    }
    Private.createMetadata = createMetadata;
})(Private || (Private = {}));
//# sourceMappingURL=model.js.map