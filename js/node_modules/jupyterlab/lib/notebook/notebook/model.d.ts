import { nbformat } from '@jupyterlab/services';
import { JSONValue } from 'phosphor/lib/algorithm/json';
import { IIterator } from 'phosphor/lib/algorithm/iteration';
import { ISignal } from 'phosphor/lib/core/signaling';
import { DocumentModel, DocumentRegistry } from '../../docregistry';
import { ICellModel, ICodeCellModel, IRawCellModel, IMarkdownCellModel } from '../cells/model';
import { IChangedArgs } from '../../common/interfaces';
import { IMetadataCursor } from '../common/metadata';
import { IObservableUndoableVector } from '../common/undo';
/**
 * The definition of a model object for a notebook widget.
 */
export interface INotebookModel extends DocumentRegistry.IModel {
    /**
     * A signal emitted when a metadata field changes.
     */
    metadataChanged: ISignal<DocumentRegistry.IModel, IChangedArgs<JSONValue>>;
    /**
     * The list of cells in the notebook.
     */
    readonly cells: IObservableUndoableVector<ICellModel>;
    /**
     * The cell model factory for the notebook.
     */
    readonly factory: ICellModelFactory;
    /**
     * The major version number of the nbformat.
     */
    readonly nbformat: number;
    /**
     * The minor version number of the nbformat.
     */
    readonly nbformatMinor: number;
    /**
     * Get a metadata cursor for the notebook.
     *
     * #### Notes
     * This method is used to interact with a namespaced
     * set of metadata on the notebook.
     */
    getMetadata(namespace: string): IMetadataCursor;
    /**
     * List the metadata namespace keys for the notebook.
     */
    listMetadata(): IIterator<string>;
}
/**
 * A factory for creating cell models.
 */
export interface ICellModelFactory {
    /**
     * Create a new code cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new code cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createCodeCell(source?: nbformat.IBaseCell): ICodeCellModel;
    /**
     * Create a new markdown cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new markdown cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createMarkdownCell(source?: nbformat.IBaseCell): IMarkdownCellModel;
    /**
     * Create a new raw cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new raw cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createRawCell(source?: nbformat.IBaseCell): IRawCellModel;
}
/**
 * An implementation of a notebook Model.
 */
export declare class NotebookModel extends DocumentModel implements INotebookModel {
    /**
     * Construct a new notebook model.
     */
    constructor(options?: NotebookModel.IOptions);
    /**
     * A signal emitted when a metadata field changes.
     */
    metadataChanged: ISignal<this, IChangedArgs<JSONValue>>;
    /**
     * Get the observable list of notebook cells.
     */
    readonly cells: IObservableUndoableVector<ICellModel>;
    /**
     * The cell model factory for the notebook.
     */
    readonly factory: ICellModelFactory;
    /**
     * The major version number of the nbformat.
     */
    readonly nbformat: number;
    /**
     * The minor version number of the nbformat.
     */
    readonly nbformatMinor: number;
    /**
     * The default kernel name of the document.
     */
    readonly defaultKernelName: string;
    /**
     * The default kernel language of the document.
     */
    readonly defaultKernelLanguage: string;
    /**
     * Dispose of the resources held by the model.
     */
    dispose(): void;
    /**
     * Serialize the model to a string.
     */
    toString(): string;
    /**
     * Deserialize the model from a string.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromString(value: string): void;
    /**
     * Serialize the model to JSON.
     */
    toJSON(): nbformat.INotebookContent;
    /**
     * Deserialize the model from JSON.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromJSON(value: nbformat.INotebookContent): void;
    /**
     * Get a metadata cursor for the notebook.
     *
     * #### Notes
     * Metadata associated with the nbformat spec are set directly
     * on the model.  This method is used to interact with a namespaced
     * set of metadata on the notebook.
     */
    getMetadata(name: string): IMetadataCursor;
    /**
     * List the metadata namespace keys for the notebook.
     */
    listMetadata(): IIterator<string>;
    /**
     * Set the cursor data for a given field.
     */
    private _setCursorData(name, newValue);
    /**
     * Handle a change in the cells list.
     */
    private _onCellsChanged(list, change);
    /**
     * Handle a change to a cell state.
     */
    private _onCellChanged(cell, change);
    private _cells;
    private _factory;
    private _metadata;
    private _cursors;
    private _nbformat;
    private _nbformatMinor;
}
/**
 * The namespace for the `NotebookModel` class statics.
 */
export declare namespace NotebookModel {
    /**
     * An options object for initializing a notebook model.
     */
    interface IOptions {
        /**
         * The language preference for the model.
         */
        languagePreference?: string;
        /**
         * A factory for creating cell models.
         *
         * The default is a shared factory instance.
         */
        factory?: ICellModelFactory;
    }
    /**
     * The default implementation of an `ICellModelFactory`.
     */
    class Factory {
        /**
         * Create a new code cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new code cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        createCodeCell(source?: nbformat.ICell): ICodeCellModel;
        /**
         * Create a new markdown cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new markdown cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        createMarkdownCell(source?: nbformat.IBaseCell): IMarkdownCellModel;
        /**
         * Create a new raw cell.
         *
         * @param source - The data to use for the original source data.
         *
         * @returns A new raw cell. If a source cell is provided, the
         *   new cell will be intialized with the data from the source.
         */
        createRawCell(source?: nbformat.IBaseCell): IRawCellModel;
    }
    /**
     * The default `Factory` instance.
     */
    const defaultFactory: Factory;
}
