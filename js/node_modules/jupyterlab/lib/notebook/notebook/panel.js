// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var signaling_1 = require('phosphor/lib/core/signaling');
var token_1 = require('phosphor/lib/core/token');
var panel_1 = require('phosphor/lib/ui/panel');
var widget_1 = require('phosphor/lib/ui/widget');
var completer_1 = require('../../completer');
var toolbar_1 = require('../../toolbar');
/**
 * The class name added to notebook panels.
 */
var NB_PANEL = 'jp-Notebook-panel';
/**
 * The class name added to a dirty widget.
 */
var DIRTY_CLASS = 'jp-mod-dirty';
/**
 * A widget that hosts a notebook toolbar and content area.
 *
 * #### Notes
 * The widget keeps the document metadata in sync with the current
 * kernel on the context.
 */
var NotebookPanel = (function (_super) {
    __extends(NotebookPanel, _super);
    /**
     * Construct a new notebook panel.
     */
    function NotebookPanel(options) {
        var _this = this;
        _super.call(this);
        this._clipboard = null;
        this._completer = null;
        this._completerHandler = null;
        this._content = null;
        this._context = null;
        this._renderer = null;
        this._rendermime = null;
        this.addClass(NB_PANEL);
        this._rendermime = options.rendermime;
        this._clipboard = options.clipboard;
        this._renderer = options.renderer;
        this.layout = new panel_1.PanelLayout();
        var rendermime = this._rendermime;
        this._content = this._renderer.createContent(rendermime);
        var toolbar = this._renderer.createToolbar();
        var layout = this.layout;
        layout.addWidget(toolbar);
        layout.addWidget(this._content);
        this._completer = this._renderer.createCompleter();
        // The completer widget's anchor node is the node whose scrollTop is
        // pegged to the completer widget's position.
        this._completer.anchor = this._content.node;
        widget_1.Widget.attach(this._completer, document.body);
        // Set up the completer handler.
        this._completerHandler = new completer_1.CellCompleterHandler({
            completer: this._completer
        });
        this._completerHandler.activeCell = this._content.activeCell;
        this._content.activeCellChanged.connect(function (s, cell) {
            _this._completerHandler.activeCell = cell;
        });
    }
    Object.defineProperty(NotebookPanel.prototype, "toolbar", {
        /**
         * Get the toolbar used by the widget.
         */
        get: function () {
            return this.layout.widgets.at(0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "content", {
        /**
         * Get the content area used by the widget.
         */
        get: function () {
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "kernel", {
        /**
         * Get the current kernel used by the panel.
         */
        get: function () {
            return this._context ? this._context.kernel : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "rendermime", {
        /**
         * Get the rendermime instance used by the widget.
         */
        get: function () {
            return this._rendermime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "renderer", {
        /**
         * Get the renderer used by the widget.
         */
        get: function () {
            return this._renderer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "clipboard", {
        /**
         * Get the clipboard instance used by the widget.
         */
        get: function () {
            return this._clipboard;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "model", {
        /**
         * The model for the widget.
         */
        get: function () {
            return this._content ? this._content.model : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotebookPanel.prototype, "context", {
        /**
         * The document context for the widget.
         *
         * #### Notes
         * Changing the context also changes the model on the
         * `content`.
         */
        get: function () {
            return this._context;
        },
        set: function (newValue) {
            newValue = newValue || null;
            if (newValue === this._context) {
                return;
            }
            var oldValue = this._context;
            this._context = newValue;
            this._rendermime.resolver = newValue;
            // Trigger private, protected, and public changes.
            this._onContextChanged(oldValue, newValue);
            this.onContextChanged(oldValue, newValue);
            this.contextChanged.emit(void 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the widget.
     */
    NotebookPanel.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._context = null;
        this._content.dispose();
        this._content = null;
        this._rendermime = null;
        this._clipboard = null;
        this._completerHandler.dispose();
        this._completerHandler = null;
        this._completer.dispose();
        this._completer = null;
        this._renderer = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle `'activate-request'` messages.
     */
    NotebookPanel.prototype.onActivateRequest = function (msg) {
        this.content.activate();
        this.activated.emit(void 0);
    };
    /**
     * Handle a change to the document context.
     *
     * #### Notes
     * The default implementation is a no-op.
     */
    NotebookPanel.prototype.onContextChanged = function (oldValue, newValue) {
        // This is a no-op.
    };
    /**
     * Handle a change in the model state.
     */
    NotebookPanel.prototype.onModelStateChanged = function (sender, args) {
        if (args.name === 'dirty') {
            this._handleDirtyState();
        }
    };
    /**
     * Handle a change to the document path.
     */
    NotebookPanel.prototype.onPathChanged = function (sender, path) {
        this.title.label = path.split('/').pop();
    };
    /**
     * Handle a change in the context.
     */
    NotebookPanel.prototype._onContextChanged = function (oldValue, newValue) {
        if (oldValue) {
            oldValue.kernelChanged.disconnect(this._onKernelChanged, this);
            oldValue.pathChanged.disconnect(this.onPathChanged, this);
            if (oldValue.model) {
                oldValue.model.stateChanged.disconnect(this.onModelStateChanged, this);
            }
        }
        if (!newValue) {
            this._onKernelChanged(null, null);
            return;
        }
        var context = newValue;
        context.kernelChanged.connect(this._onKernelChanged, this);
        var oldKernel = oldValue ? oldValue.kernel : null;
        if (context.kernel !== oldKernel) {
            this._onKernelChanged(this._context, this._context.kernel);
        }
        this._content.model = newValue.model;
        this._handleDirtyState();
        newValue.model.stateChanged.connect(this.onModelStateChanged, this);
        // Clear the cells when the context is initially populated.
        if (!newValue.isReady) {
            newValue.ready.then(function () {
                var model = newValue.model;
                // Clear the undo state of the cells.
                if (model) {
                    model.cells.clearUndo();
                }
            });
        }
        // Handle the document title.
        this.onPathChanged(context, context.path);
        context.pathChanged.connect(this.onPathChanged, this);
    };
    /**
     * Handle a change in the kernel by updating the document metadata.
     */
    NotebookPanel.prototype._onKernelChanged = function (context, kernel) {
        var _this = this;
        this._completerHandler.kernel = kernel;
        this.content.inspectionHandler.kernel = kernel;
        this.kernelChanged.emit(kernel);
        if (!this.model || !kernel) {
            return;
        }
        kernel.ready.then(function () {
            if (_this.model) {
                _this._updateLanguage(kernel.info.language_info);
            }
        });
        this._updateSpec(kernel);
    };
    /**
     * Update the kernel language.
     */
    NotebookPanel.prototype._updateLanguage = function (language) {
        var infoCursor = this.model.getMetadata('language_info');
        infoCursor.setValue(language);
    };
    /**
     * Update the kernel spec.
     */
    NotebookPanel.prototype._updateSpec = function (kernel) {
        var _this = this;
        kernel.getSpec().then(function (spec) {
            var specCursor = _this.model.getMetadata('kernelspec');
            specCursor.setValue({
                name: kernel.name,
                display_name: spec.display_name,
                language: spec.language
            });
        });
    };
    /**
     * Handle the dirty state of the model.
     */
    NotebookPanel.prototype._handleDirtyState = function () {
        if (!this.model) {
            return;
        }
        if (this.model.dirty) {
            this.title.className += " " + DIRTY_CLASS;
        }
        else {
            this.title.className = this.title.className.replace(DIRTY_CLASS, '');
        }
    };
    return NotebookPanel;
}(widget_1.Widget));
exports.NotebookPanel = NotebookPanel;
// Define the signals for the `NotebookPanel` class.
signaling_1.defineSignal(NotebookPanel.prototype, 'activated');
signaling_1.defineSignal(NotebookPanel.prototype, 'contextChanged');
signaling_1.defineSignal(NotebookPanel.prototype, 'kernelChanged');
/**
 * A namespace for `NotebookPanel` statics.
 */
var NotebookPanel;
(function (NotebookPanel) {
    /**
     * The default implementation of an `IRenderer`.
     */
    var Renderer = (function () {
        function Renderer() {
        }
        /**
         * Create a new toolbar for the panel.
         */
        Renderer.prototype.createToolbar = function () {
            return new toolbar_1.Toolbar();
        };
        /**
         * Create a new completer widget.
         */
        Renderer.prototype.createCompleter = function () {
            return new completer_1.CompleterWidget({ model: new completer_1.CompleterModel() });
        };
        return Renderer;
    }());
    NotebookPanel.Renderer = Renderer;
    /* tslint:disable */
    /**
     * The notebook renderer token.
     */
    NotebookPanel.IRenderer = new token_1.Token('jupyter.services.notebook.renderer');
})(NotebookPanel = exports.NotebookPanel || (exports.NotebookPanel = {}));
//# sourceMappingURL=panel.js.map