import { Kernel } from '@jupyterlab/services';
import { Message } from 'phosphor/lib/core/messaging';
import { MimeData as IClipboard } from 'phosphor/lib/core/mimedata';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Token } from 'phosphor/lib/core/token';
import { Widget } from 'phosphor/lib/ui/widget';
import { IChangedArgs } from '../../common/interfaces';
import { DocumentRegistry } from '../../docregistry';
import { RenderMime } from '../../rendermime';
import { CompleterWidget } from '../../completer';
import { INotebookModel } from './model';
import { Toolbar } from '../../toolbar';
import { Notebook } from './widget';
/**
 * A widget that hosts a notebook toolbar and content area.
 *
 * #### Notes
 * The widget keeps the document metadata in sync with the current
 * kernel on the context.
 */
export declare class NotebookPanel extends Widget {
    /**
     * Construct a new notebook panel.
     */
    constructor(options: NotebookPanel.IOptions);
    /**
     * A signal emitted when the panel has been activated.
     */
    activated: ISignal<this, void>;
    /**
     * A signal emitted when the panel context changes.
     */
    contextChanged: ISignal<this, void>;
    /**
     * A signal emitted when the kernel used by the panel changes.
     */
    kernelChanged: ISignal<this, Kernel.IKernel>;
    /**
     * Get the toolbar used by the widget.
     */
    readonly toolbar: Toolbar<Widget>;
    /**
     * Get the content area used by the widget.
     */
    readonly content: Notebook;
    /**
     * Get the current kernel used by the panel.
     */
    readonly kernel: Kernel.IKernel;
    /**
     * Get the rendermime instance used by the widget.
     */
    readonly rendermime: RenderMime;
    /**
     * Get the renderer used by the widget.
     */
    readonly renderer: NotebookPanel.IRenderer;
    /**
     * Get the clipboard instance used by the widget.
     */
    readonly clipboard: IClipboard;
    /**
     * The model for the widget.
     */
    readonly model: INotebookModel;
    /**
     * The document context for the widget.
     *
     * #### Notes
     * Changing the context also changes the model on the
     * `content`.
     */
    context: DocumentRegistry.IContext<INotebookModel>;
    /**
     * Dispose of the resources used by the widget.
     */
    dispose(): void;
    /**
     * Handle `'activate-request'` messages.
     */
    protected onActivateRequest(msg: Message): void;
    /**
     * Handle a change to the document context.
     *
     * #### Notes
     * The default implementation is a no-op.
     */
    protected onContextChanged(oldValue: DocumentRegistry.IContext<INotebookModel>, newValue: DocumentRegistry.IContext<INotebookModel>): void;
    /**
     * Handle a change in the model state.
     */
    protected onModelStateChanged(sender: INotebookModel, args: IChangedArgs<any>): void;
    /**
     * Handle a change to the document path.
     */
    protected onPathChanged(sender: DocumentRegistry.IContext<INotebookModel>, path: string): void;
    /**
     * Handle a change in the context.
     */
    private _onContextChanged(oldValue, newValue);
    /**
     * Handle a change in the kernel by updating the document metadata.
     */
    private _onKernelChanged(context, kernel);
    /**
     * Update the kernel language.
     */
    private _updateLanguage(language);
    /**
     * Update the kernel spec.
     */
    private _updateSpec(kernel);
    /**
     * Handle the dirty state of the model.
     */
    private _handleDirtyState();
    private _clipboard;
    private _completer;
    private _completerHandler;
    private _content;
    private _context;
    private _renderer;
    private _rendermime;
}
/**
 * A namespace for `NotebookPanel` statics.
 */
export declare namespace NotebookPanel {
    /**
     * An options interface for NotebookPanels.
     */
    interface IOptions {
        /**
         * The rendermime instance used by the panel.
         */
        rendermime: RenderMime;
        /**
         * The application clipboard.
         */
        clipboard: IClipboard;
        /**
         * The content renderer for the panel.
         *
         * The default is a shared `IRenderer` instance.
         */
        renderer: IRenderer;
    }
    /**
     * A renderer interface for NotebookPanels.
     */
    interface IRenderer {
        /**
         * Create a new content area for the panel.
         */
        createContent(rendermime: RenderMime): Notebook;
        /**
         * Create a new toolbar for the panel.
         */
        createToolbar(): Toolbar<Widget>;
        /**
         * Create a new completer widget for the panel.
         */
        createCompleter(): CompleterWidget;
    }
    /**
     * The default implementation of an `IRenderer`.
     */
    abstract class Renderer implements IRenderer {
        /**
         * Create a new content area for the panel.
         */
        abstract createContent(rendermime: RenderMime): Notebook;
        /**
         * Create a new toolbar for the panel.
         */
        createToolbar(): Toolbar<Widget>;
        /**
         * Create a new completer widget.
         */
        createCompleter(): CompleterWidget;
    }
    /**
     * The notebook renderer token.
     */
    const IRenderer: Token<IRenderer>;
}
