import { Kernel, KernelMessage, nbformat } from '@jupyterlab/services';
import { JSONObject } from 'phosphor/lib/algorithm/json';
import { IDisposable } from 'phosphor/lib/core/disposable';
import { ISignal } from 'phosphor/lib/core/signaling';
import { IObservableVector, ObservableVector } from '../../common/observablevector';
/**
 * An model that maintains a list of output data.
 */
export declare class OutputAreaModel implements IDisposable {
    /**
     * Construct a new observable outputs instance.
     */
    constructor();
    /**
     * A signal emitted when the model changes.
     */
    changed: ISignal<OutputAreaModel, ObservableVector.IChangedArgs<OutputAreaModel.Output>>;
    /**
     * A signal emitted when the model is disposed.
     */
    disposed: ISignal<OutputAreaModel, void>;
    /**
     * Get the length of the items in the model.
     */
    readonly length: number;
    /**
     * Test whether the model is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources used by the model.
     */
    dispose(): void;
    /**
     * Get an item at the specified index.
     */
    get(index: number): OutputAreaModel.Output;
    /**
     * Add an output, which may be combined with previous output.
     *
     * #### Notes
     * The output bundle is copied.
     * Contiguous stream outputs of the same `name` are combined.
     */
    add(output: OutputAreaModel.Output): number;
    /**
     * Clear all of the output.
     *
     * @param wait Delay clearing the output until the next message is added.
     */
    clear(wait?: boolean): void;
    /**
     * Add a mime type to an output data bundle.
     *
     * @param output - The output to augment.
     *
     * @param mimetype - The mimetype to add.
     *
     * @param value - The value to add.
     *
     * #### Notes
     * The output must be contained in the model, or an error will be thrown.
     * Only non-existent types can be added.
     * Types are validated before being added.
     */
    addMimeData(output: nbformat.IDisplayData | nbformat.IExecuteResult, mimetype: string, value: string | JSONObject): void;
    /**
     * Execute code on a kernel and send outputs to the model.
     */
    execute(code: string, kernel: Kernel.IKernel): Promise<KernelMessage.IExecuteReplyMsg>;
    protected clearNext: boolean;
    protected list: IObservableVector<OutputAreaModel.Output>;
    /**
     * Handle a change to the list.
     */
    private _onListChanged(sender, args);
}
/**
 * A namespace for OutputAreaModel statics.
 */
export declare namespace OutputAreaModel {
    /**
     * Output for an input request from the kernel.
     */
    interface IInputRequest {
        /**
         * Type of cell output.
         */
        output_type: 'input_request';
        /**
         * The text to show at the prompt.
         */
        prompt: string;
        /**
         * Whether the request is for a password.
         * If so, the frontend shouldn't echo input.
         */
        password: boolean;
        /**
         * The kernel that made the request, used to send an input response.
         */
        kernel: Kernel.IKernel;
    }
    /**
     * A valid output area item.
     */
    type Output = nbformat.IOutput | IInputRequest;
}
