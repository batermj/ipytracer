import { nbformat } from '@jupyterlab/services';
import { ISequence } from 'phosphor/lib/algorithm/sequence';
import { Message } from 'phosphor/lib/core/messaging';
import { ISignal } from 'phosphor/lib/core/signaling';
import { Widget } from 'phosphor/lib/ui/widget';
import { ObservableVector } from '../../common/observablevector';
import { RenderMime } from '../../rendermime';
import { OutputAreaModel } from './model';
/**
 * An output area widget.
 *
 * #### Notes
 * The widget model must be set separately and can be changed
 * at any time.  Consumers of the widget must account for a
 * `null` model, and may want to listen to the `modelChanged`
 * signal.
 */
export declare class OutputAreaWidget extends Widget {
    /**
     * Construct an output area widget.
     */
    constructor(options: OutputAreaWidget.IOptions);
    /**
     * Create a mirrored output widget.
     */
    mirror(): OutputAreaWidget;
    /**
     * A signal emitted when the widget's model changes.
     */
    modelChanged: ISignal<this, void>;
    /**
     * A signal emitted when the widget's model is disposed.
     */
    modelDisposed: ISignal<this, void>;
    /**
     * A read-only sequence of the widgets in the output area.
     */
    readonly widgets: ISequence<OutputWidget>;
    /**
     * The model for the widget.
     */
    model: OutputAreaModel;
    /**
     * Get the rendermime instance used by the widget.
     */
    readonly rendermime: RenderMime;
    /**
     * Get the renderer used by the widget.
     */
    readonly renderer: OutputAreaWidget.IRenderer;
    /**
     * The trusted state of the widget.
     */
    trusted: boolean;
    /**
     * The collapsed state of the widget.
     */
    collapsed: boolean;
    /**
     * The fixed height state of the widget.
     */
    fixedHeight: boolean;
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Handle `update-request` messages.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Add a child to the layout.
     */
    protected addChild(): void;
    /**
     * Remove a child from the layout.
     */
    protected removeChild(index: number): void;
    /**
     * Update a child in the layout.
     */
    protected updateChild(index: number): void;
    /**
     * Follow changes on the model state.
     */
    protected onModelStateChanged(sender: OutputAreaModel, args: ObservableVector.IChangedArgs<nbformat.IOutput>): void;
    /**
     * Handle a new model.
     *
     * #### Notes
     * This method is called after the model change has been handled
     * internally and before the `modelChanged` signal is emitted.
     * The default implementation is a no-op.
     */
    protected onModelChanged(oldValue: OutputAreaModel, newValue: OutputAreaModel): void;
    /**
     * Handle a change to the model.
     */
    private _onModelChanged(oldValue, newValue);
    /**
     * Handle a model disposal.
     */
    protected onModelDisposed(oldValue: OutputAreaModel, newValue: OutputAreaModel): void;
    private _onModelDisposed();
    private _trusted;
    private _fixedHeight;
    private _collapsed;
    private _minHeightTimeout;
    private _model;
    private _rendermime;
    private _renderer;
    private _injecting;
}
/**
 * A namespace for OutputAreaWidget statics.
 */
export declare namespace OutputAreaWidget {
    /**
     * The options to pass to an `OutputAreaWidget`.
     */
    interface IOptions {
        /**
         * The rendermime instance used by the widget.
         */
        rendermime: RenderMime;
        /**
         * The output widget renderer.
         *
         * Defaults to a shared `IRenderer` instance.
         */
        renderer?: IRenderer;
    }
    /**
     * An output widget renderer.
     */
    interface IRenderer {
        /**
         * Create an output widget.
         *
         *
         * @returns A new widget for an output.
         */
        createOutput(options: OutputWidget.IOptions): Widget;
    }
    /**
     * The default implementation of `IRenderer`.
     */
    class Renderer implements IRenderer {
        /**
         * Create an output widget.
         *
         *
         * @returns A new widget for an output.
         */
        createOutput(options: OutputWidget.IOptions): OutputWidget;
    }
    /**
     * The default `Renderer` instance.
     */
    const defaultRenderer: Renderer;
}
/**
 * The gutter on the left side of the OutputWidget
 */
export declare class OutputGutter extends Widget {
    /**
     * Handle the DOM events for the output gutter widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the panel's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle the `'mousedown'` event for the widget.
     */
    private _evtMousedown(event);
    /**
     * Handle the `'mouseup'` event for the widget.
     */
    private _evtMouseup(event);
    /**
     * Handle the `'mousemove'` event for the widget.
     */
    private _evtMousemove(event);
    /**
     * Start a drag event.
     */
    private _startDrag(clientX, clientY);
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    private _drag;
    private _dragData;
}
/**
 * An output widget.
 */
export declare class OutputWidget extends Widget {
    /**
     * Construct a new output widget.
     */
    constructor(options: OutputWidget.IOptions);
    /**
     * The prompt widget used by the output widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly prompt: Widget;
    /**
     * The rendered output used by the output widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly output: Widget;
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Clear the widget contents.
     */
    clear(): void;
    /**
     * Render an output.
     *
     * @param options - The options used to render the output.
     */
    render(options: OutputWidget.IRenderOptions): void;
    /**
     * Set the widget output.
     */
    protected setOutput(value: Widget): void;
    /**
     * Get the mime bundle for an output.
     *
     * @params output - A kernel output message payload.
     *
     * @returns - A mime bundle for the payload.
     */
    protected getBundle(output: nbformat.IOutput): nbformat.IMimeBundle;
    /**
     * Convert a mime bundle to a mime map.
     */
    protected convertBundle(bundle: nbformat.IMimeBundle): RenderMime.MimeMap<string>;
    private _rendermime;
    private _placeholder;
}
/**
 * The namespace for `OutputWidget` statics.
 */
export declare namespace OutputWidget {
    /**
     * The options for rendering the output.
     */
    interface IRenderOptions {
        /**
         * The kernel output message payload.
         */
        output: OutputAreaModel.Output;
        /**
         * Whether the output is trusted.
         */
        trusted: boolean;
        /**
         * A callback that can be used to add a mimetype to the original bundle.
         */
        injector?: (mimetype: string, value: string) => void;
    }
}
/**
 * A namespace for OutputArea statics.
 */
export declare namespace OutputWidget {
    /**
     * The options to pass to an `OutputWidget`.
     */
    interface IOptions {
        /**
         * The rendermime instance used by the widget.
         */
        rendermime: RenderMime;
    }
}
