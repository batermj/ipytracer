import { ISignal } from 'phosphor/lib/core/signaling';
import * as CodeMirror from 'codemirror';
import { CodeMirrorWidget } from '../../../codemirror/widget';
import { IChangedArgs } from '../../../common/interfaces';
import { ICellModel } from '../../cells/model';
import { ICellEditorWidget, EdgeLocation, ITextChange, ICompletionRequest } from '../../cells/editor';
/**
 * A code mirror widget for a cell editor.
 */
export declare class CodeMirrorCellEditorWidget extends CodeMirrorWidget implements ICellEditorWidget {
    /**
     * Construct a new cell editor widget.
     */
    constructor(options?: CodeMirror.EditorConfiguration);
    /**
     * A signal emitted when a tab (text) completion is requested.
     */
    completionRequested: ISignal<ICellEditorWidget, ICompletionRequest>;
    /**
     * A signal emitted when either the top or bottom edge is requested.
     */
    edgeRequested: ISignal<ICellEditorWidget, EdgeLocation>;
    /**
     * A signal emitted when a text change is completed.
     */
    textChanged: ISignal<ICellEditorWidget, ITextChange>;
    /**
     * The cell model used by the editor.
     */
    model: ICellModel;
    /**
     * The line numbers state of the editor.
     */
    lineNumbers: boolean;
    /**
     * Dispose of the resources held by the editor.
     */
    dispose(): void;
    /**
     * Change the mode for an editor based on the given mime type.
     */
    setMimeType(mimeType: string): void;
    /**
     * Set whether the editor is read only.
     */
    setReadOnly(readOnly: boolean): void;
    /**
     * Test whether the editor has keyboard focus.
     */
    hasFocus(): boolean;
    /**
     * Returns a zero-based last line number.
     */
    getLastLine(): number;
    /**
     * Get the current cursor position of the editor.
     */
    getCursorPosition(): number;
    /**
     * Set the position of the cursor.
     *
     * @param position - A new cursor's position.
     */
    setCursorPosition(position: number): void;
    /**
     * Set the position of the cursor.
     *
     * @param line - A zero-based line number.
     *
     * @param character - A zero-based character number.
     */
    setCursor(line: number, character: number): void;
    /**
     * Handle changes in the model state.
     */
    protected onModelStateChanged(model: ICellModel, args: IChangedArgs<any>): void;
    /**
     * Handle change events from the document.
     */
    protected onDocChange(doc: CodeMirror.Doc, change: CodeMirror.EditorChange): void;
    /**
     * Handle keydown events from the editor.
     */
    protected onEditorKeydown(editor: CodeMirror.Editor, event: KeyboardEvent): void;
    /**
     * Handle a tab key press.
     */
    protected onTabEvent(event: KeyboardEvent, ch: number, line: number): void;
    private _model;
}
