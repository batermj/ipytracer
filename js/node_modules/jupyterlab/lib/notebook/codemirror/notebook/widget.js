// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var widget_1 = require('../../cells/widget');
var mimetype_1 = require('../../common/mimetype');
var widget_2 = require('../../notebook/widget');
var widget_3 = require('../cells/widget');
/**
 * A code mirror renderer for a notebook.
 */
var CodeMirrorNotebookRenderer = (function (_super) {
    __extends(CodeMirrorNotebookRenderer, _super);
    function CodeMirrorNotebookRenderer() {
        _super.apply(this, arguments);
    }
    /**
     * Create a code cell editor.
     */
    CodeMirrorNotebookRenderer.prototype.createCodeCell = function (model, rendermime) {
        var widget = new widget_1.CodeCellWidget({
            rendermime: rendermime,
            renderer: CodeMirrorNotebookRenderer.defaultCodeCellRenderer
        });
        widget.model = model;
        return widget;
    };
    /**
     * Create a markdown cell editor.
     */
    CodeMirrorNotebookRenderer.prototype.createMarkdownCell = function (model, rendermime) {
        var widget = new widget_1.MarkdownCellWidget({
            rendermime: rendermime,
            renderer: CodeMirrorNotebookRenderer.defaultMarkdownCellRenderer
        });
        widget.model = model;
        return widget;
    };
    /**
     * Create a raw cell editor.
     */
    CodeMirrorNotebookRenderer.prototype.createRawCell = function (model) {
        var widget = new widget_1.RawCellWidget({
            renderer: CodeMirrorNotebookRenderer.defaultRawCellRenderer
        });
        widget.model = model;
        return widget;
    };
    /**
     * Get the preferred mimetype given language info.
     */
    CodeMirrorNotebookRenderer.prototype.getCodeMimetype = function (info) {
        return mimetype_1.mimetypeForLanguage(info);
    };
    return CodeMirrorNotebookRenderer;
}(widget_2.Notebook.Renderer));
exports.CodeMirrorNotebookRenderer = CodeMirrorNotebookRenderer;
/**
 * A namespace for `CodeMirrorNotebookRenderer` statics.
 */
var CodeMirrorNotebookRenderer;
(function (CodeMirrorNotebookRenderer) {
    /**
     * A default code mirror renderer for a code cell editor.
     */
    CodeMirrorNotebookRenderer.defaultCodeCellRenderer = new widget_3.CodeMirrorCodeCellWidgetRenderer({
        editorInitializer: function (editor) {
            editor.editor.setOption('matchBrackets', true);
            editor.editor.setOption('autoCloseBrackets', true);
        }
    });
    /**
     * A default code mirror renderer for a markdown cell editor.
     */
    CodeMirrorNotebookRenderer.defaultMarkdownCellRenderer = new widget_3.CodeMirrorCodeCellWidgetRenderer({
        editorInitializer: function (editor) {
            // Turn on line wrapping for markdown cells.
            editor.editor.setOption('lineWrapping', true);
        }
    });
    /**
     * A default code mirror renderer for a raw cell editor.
     */
    CodeMirrorNotebookRenderer.defaultRawCellRenderer = new widget_3.CodeMirrorCodeCellWidgetRenderer({
        editorInitializer: function (editor) {
            // Turn on line wrapping for markdown cells.
            editor.editor.setOption('lineWrapping', true);
        }
    });
    /**
     * A default code mirror renderer for a notebook.
     */
    CodeMirrorNotebookRenderer.defaultRenderer = new CodeMirrorNotebookRenderer();
})(CodeMirrorNotebookRenderer = exports.CodeMirrorNotebookRenderer || (exports.CodeMirrorNotebookRenderer = {}));
//# sourceMappingURL=widget.js.map