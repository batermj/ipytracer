// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var menu_1 = require('phosphor/lib/ui/menu');
var clipboard_1 = require('../clipboard');
var commandpalette_1 = require('../commandpalette');
var mainmenu_1 = require('../mainmenu');
var docregistry_1 = require('../docregistry');
var inspector_1 = require('../inspector');
var rendermime_1 = require('../rendermime');
var services_1 = require('../services');
var statedb_1 = require('../statedb');
var index_1 = require('./index');
/**
 * The class name for all main area portrait tab icons.
 */
var PORTRAIT_ICON_CLASS = 'jp-MainAreaPortraitIcon';
/**
 * The class name for the notebook icon from the default theme.
 */
var NOTEBOOK_ICON_CLASS = 'jp-ImageNotebook';
/**
 * The notebook plugin state namespace.
 */
var NAMESPACE = 'notebooks';
/**
 * The notebook instance tracker.
 */
var tracker = new index_1.NotebookTracker();
/**
 * The map of command ids used by the notebook.
 */
var cmdIds = {
    interrupt: 'notebook:interrupt-kernel',
    restart: 'notebook:restart-kernel',
    restartClear: 'notebook:restart-clear',
    restartRunAll: 'notebook:restart-runAll',
    switchKernel: 'notebook:switch-kernel',
    clearAllOutputs: 'notebook:clear-outputs',
    run: 'notebook-cells:run',
    runAndAdvance: 'notebook-cells:run-and-advance',
    runAndInsert: 'notebook-cells:run-and-insert',
    runAll: 'notebook:run-all',
    toCode: 'notebook-cells:to-code',
    toMarkdown: 'notebook-cells:to-markdown',
    toRaw: 'notebook-cells:to-raw',
    cut: 'notebook-cells:cut',
    copy: 'notebook-cells:copy',
    paste: 'notebook-cells:paste',
    moveUp: 'notebook-cells:move-up',
    moveDown: 'notebook-cells:move-down',
    clearOutputs: 'notebook-cells:clear-output',
    deleteCell: 'notebook-cells:delete',
    insertAbove: 'notebook-cells:insert-above',
    insertBelow: 'notebook-cells:insert-below',
    selectAbove: 'notebook-cells:select-above',
    selectBelow: 'notebook-cells:select-below',
    extendAbove: 'notebook-cells:extend-above',
    extendBelow: 'notebook-cells:extend-below',
    editMode: 'notebook:edit-mode',
    merge: 'notebook-cells:merge',
    split: 'notebook-cells:split',
    commandMode: 'notebook:command-mode',
    toggleLines: 'notebook-cells:toggle-line-numbers',
    toggleAllLines: 'notebook-cells:toggle-all-line-numbers',
    undo: 'notebook-cells:undo',
    redo: 'notebook-cells:redo',
    markdown1: 'notebook-cells:markdown-header1',
    markdown2: 'notebook-cells:markdown-header2',
    markdown3: 'notebook-cells:markdown-header3',
    markdown4: 'notebook-cells:markdown-header4',
    markdown5: 'notebook-cells:markdown-header5',
    markdown6: 'notebook-cells:markdown-header6',
};
/**
 * The notebook widget tracker provider.
 */
exports.notebookTrackerProvider = {
    id: 'jupyter.services.notebook-tracker',
    provides: index_1.INotebookTracker,
    requires: [
        docregistry_1.IDocumentRegistry,
        services_1.IServiceManager,
        rendermime_1.IRenderMime,
        clipboard_1.IClipboard,
        mainmenu_1.IMainMenu,
        commandpalette_1.ICommandPalette,
        inspector_1.IInspector,
        index_1.NotebookPanel.IRenderer,
        statedb_1.IStateDB
    ],
    activate: activateNotebookHandler,
    autoStart: true
};
/**
 * Activate the notebook handler extension.
 */
function activateNotebookHandler(app, registry, services, rendermime, clipboard, mainMenu, palette, inspector, renderer, state) {
    var widgetFactory = new index_1.NotebookWidgetFactory({
        name: 'Notebook',
        fileExtensions: ['.ipynb'],
        modelName: 'notebook',
        defaultFor: ['.ipynb'],
        preferKernel: true,
        canStartKernel: true,
        rendermime: rendermime,
        clipboard: clipboard,
        renderer: renderer
    });
    // Sync tracker and set the source of the code inspector.
    app.shell.currentChanged.connect(function (sender, args) {
        var widget = tracker.sync(args.newValue);
        if (widget) {
            inspector.source = widget.content.inspectionHandler;
        }
    });
    registry.addModelFactory(new index_1.NotebookModelFactory());
    registry.addWidgetFactory(widgetFactory);
    registry.addFileType({
        name: 'Notebook',
        extension: '.ipynb',
        contentType: 'notebook',
        fileFormat: 'json'
    });
    registry.addCreator({
        name: 'Notebook',
        fileType: 'Notebook',
        widgetName: 'Notebook'
    });
    addCommands(app, services);
    populatePalette(palette);
    var id = 0; // The ID counter for notebook panels.
    widgetFactory.widgetCreated.connect(function (sender, widget) {
        // If the notebook panel does not have an ID, assign it one.
        widget.id = widget.id || "notebook-" + ++id;
        widget.title.icon = PORTRAIT_ICON_CLASS + " " + NOTEBOOK_ICON_CLASS;
        // Immediately set the inspector source to the current notebook.
        inspector.source = widget.content.inspectionHandler;
        // Add the notebook panel to the tracker.
        tracker.add(widget);
        // Add the notebook path to the state database.
        var key = NAMESPACE + ":" + widget.context.path;
        state.save(key, { path: widget.context.path });
        // Remove the notebook path from the state database on disposal.
        widget.disposed.connect(function () { state.remove(key); });
        // Keep track of path changes in the state database.
        widget.context.pathChanged.connect(function (sender, path) {
            state.remove(key);
            key = NAMESPACE + ":" + path;
            state.save(key, { path: path });
        });
    });
    // Reload any notebooks whose state has been stored.
    Promise.all([state.fetchNamespace(NAMESPACE), app.started, services.ready])
        .then(function (_a) {
        var items = _a[0];
        var open = 'file-operations:open';
        items.forEach(function (item) { app.commands.execute(open, item.value); });
    });
    // Add main menu notebook menu.
    mainMenu.addMenu(createMenu(app), { rank: 20 });
    return tracker;
}
/**
 * Add the notebook commands to the application's command registry.
 */
function addCommands(app, services) {
    var commands = app.commands;
    commands.addCommand(cmdIds.runAndAdvance, {
        label: 'Run Cell(s) and Advance',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var content = current.content;
                index_1.NotebookActions.runAndAdvance(content, current.context.kernel);
            }
        }
    });
    commands.addCommand(cmdIds.run, {
        label: 'Run Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.run(current.content, current.context.kernel);
            }
        }
    });
    commands.addCommand(cmdIds.runAndInsert, {
        label: 'Run Cell(s) and Insert',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.runAndInsert(current.content, current.context.kernel);
            }
        }
    });
    commands.addCommand(cmdIds.runAll, {
        label: 'Run All Cells',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.runAll(current.content, current.context.kernel);
            }
        }
    });
    commands.addCommand(cmdIds.restart, {
        label: 'Restart Kernel',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                docregistry_1.restartKernel(current.kernel, current.node).then(function () {
                    current.activate();
                });
            }
        }
    });
    commands.addCommand(cmdIds.restartClear, {
        label: 'Restart Kernel & Clear Outputs',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var promise = docregistry_1.restartKernel(current.kernel, current.node);
                promise.then(function (result) {
                    current.activate();
                    if (result) {
                        index_1.NotebookActions.clearAllOutputs(current.content);
                    }
                });
            }
        }
    });
    commands.addCommand(cmdIds.restartRunAll, {
        label: 'Restart Kernel & Run All',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var promise = docregistry_1.restartKernel(current.kernel, current.node);
                promise.then(function (result) {
                    current.activate();
                    index_1.NotebookActions.runAll(current.content, current.context.kernel);
                });
            }
        }
    });
    commands.addCommand(cmdIds.clearAllOutputs, {
        label: 'Clear All Outputs',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.clearAllOutputs(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.clearOutputs, {
        label: 'Clear Output(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.clearOutputs(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.interrupt, {
        label: 'Interrupt Kernel',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var kernel = current.context.kernel;
                if (kernel) {
                    kernel.interrupt();
                }
            }
        }
    });
    commands.addCommand(cmdIds.toCode, {
        label: 'Convert to Code',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.changeCellType(current.content, 'code');
            }
        }
    });
    commands.addCommand(cmdIds.toMarkdown, {
        label: 'Convert to Markdown',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.changeCellType(current.content, 'markdown');
            }
        }
    });
    commands.addCommand(cmdIds.toRaw, {
        label: 'Convert to Raw',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.changeCellType(current.content, 'raw');
            }
        }
    });
    commands.addCommand(cmdIds.cut, {
        label: 'Cut Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.cut(current.content, current.clipboard);
            }
        }
    });
    commands.addCommand(cmdIds.copy, {
        label: 'Copy Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.copy(current.content, current.clipboard);
            }
        }
    });
    commands.addCommand(cmdIds.paste, {
        label: 'Paste Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.paste(current.content, current.clipboard);
            }
        }
    });
    commands.addCommand(cmdIds.deleteCell, {
        label: 'Delete Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.deleteCells(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.split, {
        label: 'Split Cell',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.splitCell(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.merge, {
        label: 'Merge Selected Cell(s)',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.mergeCells(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.insertAbove, {
        label: 'Insert Cell Above',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.insertAbove(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.insertBelow, {
        label: 'Insert Cell Below',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.insertBelow(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.selectAbove, {
        label: 'Select Cell Above',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.selectAbove(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.selectBelow, {
        label: 'Select Cell Below',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.selectBelow(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.extendAbove, {
        label: 'Extend Selection Above',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.extendSelectionAbove(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.extendBelow, {
        label: 'Extend Selection Below',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.extendSelectionBelow(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.moveUp, {
        label: 'Move Cell(s) Up',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.moveUp(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.moveDown, {
        label: 'Move Cell(s) Down',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.moveDown(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.toggleLines, {
        label: 'Toggle Line Numbers',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.toggleLineNumbers(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.toggleAllLines, {
        label: 'Toggle All Line Numbers',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.toggleAllLineNumbers(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.commandMode, {
        label: 'To Command Mode',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.mode = 'command';
            }
        }
    });
    commands.addCommand(cmdIds.editMode, {
        label: 'To Edit Mode',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                current.content.mode = 'edit';
            }
        }
    });
    commands.addCommand(cmdIds.undo, {
        label: 'Undo Cell Operation',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.undo(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.redo, {
        label: 'Redo Cell Operation',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.redo(current.content);
            }
        }
    });
    commands.addCommand(cmdIds.switchKernel, {
        label: 'Switch Kernel',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                var context = current.context;
                var node = current.node;
                docregistry_1.selectKernelForContext(context, services.sessions, node).then(function () {
                    current.activate();
                });
            }
        }
    });
    commands.addCommand(cmdIds.markdown1, {
        label: 'Markdown Header 1',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 1);
            }
        }
    });
    commands.addCommand(cmdIds.markdown2, {
        label: 'Markdown Header 2',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 2);
            }
        }
    });
    commands.addCommand(cmdIds.markdown3, {
        label: 'Markdown Header 3',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 3);
            }
        }
    });
    commands.addCommand(cmdIds.markdown4, {
        label: 'Markdown Header 4',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 4);
            }
        }
    });
    commands.addCommand(cmdIds.markdown5, {
        label: 'Markdown Header 5',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 5);
            }
        }
    });
    commands.addCommand(cmdIds.markdown6, {
        label: 'Markdown Header 6',
        execute: function () {
            var current = tracker.currentWidget;
            if (current) {
                index_1.NotebookActions.setMarkdownHeader(current.content, 6);
            }
        }
    });
}
/**
 * Populate the application's command palette with notebook commands.
 */
function populatePalette(palette) {
    var category = 'Notebook Operations';
    [
        cmdIds.interrupt,
        cmdIds.restart,
        cmdIds.restartClear,
        cmdIds.restartRunAll,
        cmdIds.runAll,
        cmdIds.clearAllOutputs,
        cmdIds.toggleAllLines,
        cmdIds.editMode,
        cmdIds.commandMode,
        cmdIds.switchKernel
    ].forEach(function (command) { palette.addItem({ command: command, category: category }); });
    category = 'Notebook Cell Operations';
    [
        cmdIds.run,
        cmdIds.runAndAdvance,
        cmdIds.runAndInsert,
        cmdIds.clearOutputs,
        cmdIds.toCode,
        cmdIds.toMarkdown,
        cmdIds.toRaw,
        cmdIds.cut,
        cmdIds.copy,
        cmdIds.paste,
        cmdIds.deleteCell,
        cmdIds.split,
        cmdIds.merge,
        cmdIds.insertAbove,
        cmdIds.insertBelow,
        cmdIds.selectAbove,
        cmdIds.selectBelow,
        cmdIds.extendAbove,
        cmdIds.extendBelow,
        cmdIds.moveDown,
        cmdIds.moveUp,
        cmdIds.toggleLines,
        cmdIds.undo,
        cmdIds.redo,
        cmdIds.markdown1,
        cmdIds.markdown2,
        cmdIds.markdown3,
        cmdIds.markdown4,
        cmdIds.markdown5,
        cmdIds.markdown6
    ].forEach(function (command) { palette.addItem({ command: command, category: category }); });
}
/**
 * Creates a menu for the notebook.
 */
function createMenu(app) {
    var commands = app.commands, keymap = app.keymap;
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    var settings = new menu_1.Menu({ commands: commands, keymap: keymap });
    menu.title.label = 'Notebook';
    settings.title.label = 'Settings';
    settings.addItem({ command: cmdIds.toggleAllLines });
    menu.addItem({ command: cmdIds.undo });
    menu.addItem({ command: cmdIds.redo });
    menu.addItem({ command: cmdIds.split });
    menu.addItem({ command: cmdIds.deleteCell });
    menu.addItem({ command: cmdIds.clearAllOutputs });
    menu.addItem({ command: cmdIds.runAll });
    menu.addItem({ command: cmdIds.restart });
    menu.addItem({ command: cmdIds.switchKernel });
    menu.addItem({ type: 'separator' });
    menu.addItem({ type: 'submenu', menu: settings });
    return menu;
}
//# sourceMappingURL=plugin.js.map