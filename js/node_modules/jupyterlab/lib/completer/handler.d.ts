import { Kernel, KernelMessage } from '@jupyterlab/services';
import { IDisposable } from 'phosphor/lib/core/disposable';
import { ICellEditorWidget, ITextChange, ICompletionRequest } from '../notebook/cells/editor';
import { BaseCellWidget } from '../notebook/cells/widget';
import { CompleterWidget } from './widget';
/**
 * A completer handler for cell widgets.
 */
export declare class CellCompleterHandler implements IDisposable {
    /**
     * Construct a new completer handler for a widget.
     */
    constructor(options: CellCompleterHandler.IOptions);
    /**
     * The kernel used by the completer handler.
     */
    kernel: Kernel.IKernel;
    /**
     * The cell widget used by the completer handler.
     */
    activeCell: BaseCellWidget;
    /**
     * Get whether the completer handler is disposed.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources used by the handler.
     */
    dispose(): void;
    /**
     * Make a complete request using the kernel.
     */
    protected makeRequest(request: ICompletionRequest): Promise<void>;
    /**
     * Receive a completion reply from the kernel.
     */
    protected onReply(pending: number, request: ICompletionRequest, msg: KernelMessage.ICompleteReplyMsg): void;
    /**
     * Handle a text changed signal from an editor.
     */
    protected onTextChanged(editor: ICellEditorWidget, change: ITextChange): void;
    /**
     * Handle a completion requested signal from an editor.
     */
    protected onCompletionRequested(editor: ICellEditorWidget, request: ICompletionRequest): void;
    /**
     * Handle a visiblity change signal from a completer widget.
     */
    protected onVisibilityChanged(completer: CompleterWidget): void;
    /**
     * Handle a completion selected signal from the completion widget.
     */
    protected onCompletionSelected(widget: CompleterWidget, value: string): void;
    private _activeCell;
    private _completer;
    private _kernel;
    private _pending;
}
/**
 * A namespace for cell completer handler statics.
 */
export declare namespace CellCompleterHandler {
    /**
     * The instantiation options for cell completer handlers.
     */
    interface IOptions {
        /**
         * The completer widget the handler will connect to.
         */
        completer: CompleterWidget;
        /**
         * The kernel for the completer handler.
         */
        kernel?: Kernel.IKernel;
    }
}
