import { JSONObject } from 'phosphor/lib/algorithm/json';
import { IDisposable } from 'phosphor/lib/core/disposable';
import { ISignal } from 'phosphor/lib/core/signaling';
import { ICompletionRequest, ITextChange } from '../notebook/cells/editor';
/**
 * An object describing a completion option injection into text.
 */
export interface ICompletionPatch {
    /**
     * The patch text.
     */
    text: string;
    /**
     * The position in the text where cursor should be after patch application.
     */
    position: number;
}
/**
 * A completer menu item.
 */
export interface ICompleterItem {
    /**
     * The highlighted, marked up text of a visible completer item.
     */
    text: string;
    /**
     * The raw text of a visible completer item.
     */
    raw: string;
}
/**
 * A cursor span.
 */
export interface ICursorSpan extends JSONObject {
    /**
     * The start position of the cursor.
     */
    start: number;
    /**
     * The end position of the cursor.
     */
    end: number;
}
/**
 * The data model backing a code completer widget.
 */
export interface ICompleterModel extends IDisposable {
    /**
     * A signal emitted when state of the completer menu changes.
     */
    stateChanged: ISignal<ICompleterModel, void>;
    /**
     * The current text change details.
     */
    current: ITextChange;
    /**
     * The cursor details that the API has used to return matching options.
     */
    cursor: ICursorSpan;
    /**
     * A flag that is true when the model value was modified by a subset match.
     */
    subsetMatch: boolean;
    /**
     * The list of visible items in the completer menu.
     */
    items: ICompleterItem[];
    /**
     * The unfiltered list of all available options in a completer menu.
     */
    options: string[];
    /**
     * The original completer request details.
     */
    original: ICompletionRequest;
    /**
     * The query against which items are filtered.
     */
    query: string;
    /**
     * Handle a text change.
     */
    handleTextChange(change: ITextChange): void;
    /**
     * Create a resolved patch between the original state and a patch string.
     */
    createPatch(patch: string): ICompletionPatch;
    /**
     * Reset the state of the model.
     */
    reset(): void;
}
/**
 * An implementation of a completer model.
 */
export declare class CompleterModel implements ICompleterModel {
    /**
     * A signal emitted when state of the completer menu changes.
     */
    stateChanged: ISignal<ICompleterModel, void>;
    /**
     * The list of visible items in the completer menu.
     *
     * #### Notes
     * This is a read-only property.
     */
    readonly items: ICompleterItem[];
    /**
     * The unfiltered list of all available options in a completer menu.
     */
    options: string[];
    /**
     * The original completion request details.
     */
    original: ICompletionRequest;
    /**
     * The current text change details.
     */
    current: ITextChange;
    /**
     * The cursor details that the API has used to return matching options.
     */
    cursor: ICursorSpan;
    /**
     * The query against which items are filtered.
     */
    query: string;
    /**
     * A flag that is true when the model value was modified by a subset match.
     */
    subsetMatch: boolean;
    /**
     * Get whether the model is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources held by the model.
     */
    dispose(): void;
    /**
     * Handle a text change.
     */
    handleTextChange(change: ITextChange): void;
    /**
     * Create a resolved patch between the original state and a patch string.
     *
     * @param patch - The patch string to apply to the original value.
     *
     * @returns A patched text change or null if original value did not exist.
     */
    createPatch(patch: string): ICompletionPatch;
    /**
     * Reset the state of the model and emit a state change signal.
     */
    reset(): void;
    /**
     * Apply the query to the complete options list to return the matching subset.
     */
    private _filter();
    /**
     * Reset the state of the model.
     */
    private _reset();
    private _current;
    private _cursor;
    private _isDisposed;
    private _options;
    private _original;
    private _query;
    private _subsetMatch;
}
