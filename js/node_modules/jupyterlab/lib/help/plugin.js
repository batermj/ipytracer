// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var services_1 = require('@jupyterlab/services');
var menu_1 = require('phosphor/lib/ui/menu');
var commandpalette_1 = require('../commandpalette');
var iframe_1 = require('../iframe');
var mainmenu_1 = require('../mainmenu');
/**
 * The class name added to the help widget.
 */
var HELP_CLASS = 'jp-Help';
/**
 * A list of commands to add to the help widget.
 */
var COMMANDS = [
    {
        text: 'Scipy Lecture Notes',
        id: 'help-doc:scipy-lecture-notes',
        url: 'http://www.scipy-lectures.org/'
    },
    {
        text: 'Numpy Reference',
        id: 'help-doc:numpy-reference',
        url: '//docs.scipy.org/doc/numpy/reference/'
    },
    {
        text: 'Scipy Reference',
        id: 'help-doc:scipy-reference',
        url: '//docs.scipy.org/doc/scipy/reference/'
    },
    {
        text: 'Notebook Tutorial',
        id: 'help-doc:notebook-tutorial',
        url: '//nbviewer.jupyter.org/github/jupyter/notebook/' +
            'blob/master/docs/source/examples/Notebook/Notebook Basics.ipynb'
    },
    {
        text: 'Python Reference',
        id: 'help-doc:python-reference',
        url: '//docs.python.org/3.5/'
    },
    {
        text: 'IPython Reference',
        id: 'help-doc:ipython-reference',
        url: '//ipython.org/documentation.html?v=20160707164940'
    },
    {
        text: 'Matplotlib Reference',
        id: 'help-doc:mathplotlib-reference',
        url: 'http://matplotlib.org/contents.html?v=20160707164940'
    },
    {
        text: 'SymPy Reference',
        id: 'help-doc:sympy-reference',
        url: 'http://docs.sympy.org/latest/index.html?v=20160707164940'
    },
    {
        text: 'Pandas Reference',
        id: 'help-doc:pandas-reference',
        url: 'http://pandas.pydata.org/pandas-docs/stable/?v=20160707164940'
    },
    {
        text: 'Markdown Reference',
        id: 'help-doc:markdown-reference',
        url: '//help.github.com/articles/getting-started-with-writing-and-formatting-on-github/'
    }
];
/**
 * The help handler extension.
 */
exports.helpHandlerExtension = {
    id: 'jupyter.extensions.help-handler',
    requires: [mainmenu_1.IMainMenu, commandpalette_1.ICommandPalette],
    activate: activateHelpHandler,
    autoStart: true
};
/**
 * Activate the help handler extension.
 *
 * @param app - The phosphide application object.
 *
 * returns A promise that resolves when the extension is activated.
 */
function activateHelpHandler(app, mainMenu, palette) {
    var iframe = new iframe_1.IFrame();
    iframe.addClass(HELP_CLASS);
    iframe.title.label = 'Help';
    iframe.id = 'help-doc';
    COMMANDS.forEach(function (command) { return app.commands.addCommand(command.id, {
        label: command.text,
        execute: function () {
            Private.attachHelp(app, iframe);
            Private.showHelp(app, iframe);
            iframe.loadURL(command.url);
        }
    }); });
    app.commands.addCommand('help-doc:activate', {
        execute: function () { Private.showHelp(app, iframe); }
    });
    app.commands.addCommand('help-doc:hide', {
        execute: function () { Private.hideHelp(app, iframe); }
    });
    app.commands.addCommand('help-doc:toggle', {
        execute: function () { Private.toggleHelp(app, iframe); }
    });
    COMMANDS.forEach(function (item) { return palette.addItem({
        command: item.id,
        category: 'Help'
    }); });
    var openClassicNotebookId = 'classic-notebook:open';
    app.commands.addCommand(openClassicNotebookId, {
        label: 'Open Classic Notebook',
        execute: function () {
            window.open(services_1.utils.getBaseUrl() + 'tree');
        }
    });
    palette.addItem({ command: openClassicNotebookId, category: 'Help' });
    var menu = Private.createMenu(app);
    mainMenu.addMenu(menu, {});
    return Promise.resolve(void 0);
}
/**
 * A namespace for help plugin private functions.
 */
var Private;
(function (Private) {
    /**
     * Creates a menu for the help plugin.
     */
    function createMenu(app) {
        var commands = app.commands, keymap = app.keymap;
        var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
        menu.title.label = 'Help';
        menu.addItem({ command: 'about-jupyterlab:show' });
        menu.addItem({ command: 'faq-jupyterlab:show' });
        menu.addItem({ command: 'classic-notebook:open' });
        COMMANDS.forEach(function (item) { return menu.addItem({ command: item.id }); });
        return menu;
    }
    Private.createMenu = createMenu;
    /**
     * Attach the help iframe widget to the application shell.
     */
    function attachHelp(app, iframe) {
        if (!iframe.isAttached) {
            app.shell.addToRightArea(iframe);
        }
    }
    Private.attachHelp = attachHelp;
    /**
     * Show the help widget.
     */
    function showHelp(app, iframe) {
        app.shell.activateRight(iframe.id);
    }
    Private.showHelp = showHelp;
    /**
     * Hide the help widget.
     */
    function hideHelp(app, iframe) {
        if (!iframe.isHidden) {
            app.shell.collapseRight();
        }
    }
    Private.hideHelp = hideHelp;
    /**
     * Toggle whether the help widget is shown or hidden.
     */
    function toggleHelp(app, iframe) {
        if (iframe.isHidden) {
            showHelp(app, iframe);
        }
        else {
            hideHelp(app, iframe);
        }
    }
    Private.toggleHelp = toggleHelp;
})(Private || (Private = {}));
//# sourceMappingURL=plugin.js.map