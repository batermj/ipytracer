// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var iteration_1 = require('phosphor/lib/algorithm/iteration');
var disposable_1 = require('phosphor/lib/core/disposable');
var menu_1 = require('phosphor/lib/ui/menu');
var commandpalette_1 = require('../commandpalette');
var instancetracker_1 = require('../common/instancetracker');
var docmanager_1 = require('../docmanager');
var docregistry_1 = require('../docregistry');
var mainmenu_1 = require('../mainmenu');
var services_1 = require('../services');
var statedb_1 = require('../statedb');
var _1 = require('./');
/**
 * The default file browser provider.
 */
exports.fileBrowserProvider = {
    id: 'jupyter.services.file-browser',
    provides: _1.IPathTracker,
    requires: [
        services_1.IServiceManager, docregistry_1.IDocumentRegistry, mainmenu_1.IMainMenu, commandpalette_1.ICommandPalette, statedb_1.IStateDB
    ],
    activate: activateFileBrowser,
    autoStart: true
};
/**
 * The map of command ids used by the file browser.
 */
var cmdIds = {
    save: 'file-operations:save',
    restoreCheckpoint: 'file-operations:restore-checkpoint',
    saveAs: 'file-operations:saveAs',
    close: 'file-operations:close',
    closeAllFiles: 'file-operations:closeAllFiles',
    open: 'file-operations:open',
    showBrowser: 'file-browser:activate',
    hideBrowser: 'file-browser:hide',
    toggleBrowser: 'file-browser:toggle'
};
/**
 * The widget instance tracker for the file browser plugin.
 */
var tracker = new instancetracker_1.InstanceTracker();
/**
 * The filebrowser plugin state namespace.
 */
var NAMESPACE = 'filebrowser';
/**
 * Activate the file browser.
 */
function activateFileBrowser(app, manager, registry, mainMenu, palette, state) {
    var id = 0;
    var opener = {
        open: function (widget) {
            if (!widget.id) {
                widget.id = "document-manager-" + ++id;
            }
            if (!widget.isAttached) {
                app.shell.addToMainArea(widget);
                tracker.add(widget);
            }
            app.shell.activateMain(widget.id);
        }
    };
    var commands = app.commands, keymap = app.keymap;
    var docManager = new docmanager_1.DocumentManager({ registry: registry, manager: manager, opener: opener });
    var fbModel = new _1.FileBrowserModel({ manager: manager });
    var fbWidget = new _1.FileBrowser({
        commands: commands,
        keymap: keymap,
        manager: docManager,
        model: fbModel
    });
    var category = 'File Operations';
    var creatorCmds = Object.create(null);
    var addCreator = function (name) {
        var disposables = creatorCmds[name] = new disposable_1.DisposableSet();
        var command = Private.commandForName(name);
        disposables.add(commands.addCommand(command, {
            execute: function () {
                fbWidget.createFrom(name);
            },
            label: "New " + name
        }));
        disposables.add(palette.addItem({ command: command, category: category }));
    };
    // Save the state of the file browser in the state database.
    fbModel.pathChanged.connect(function (sender, args) {
        state.save(NAMESPACE + ":cwd", { path: args.newValue });
    });
    // Restore the state of the file browser on reload.
    Promise.all([state.fetch(NAMESPACE + ":cwd"), app.started]).then(function (_a) {
        var cwd = _a[0];
        if (cwd) {
            fbModel.cd(cwd.path);
        }
    });
    // Sync tracker with currently focused widget.
    app.shell.currentChanged.connect(function (sender, args) {
        tracker.sync(args.newValue);
    });
    iteration_1.each(registry.creators(), function (creator) {
        addCreator(creator.name);
    });
    // Add a context menu to the dir listing.
    var node = fbWidget.node.getElementsByClassName('jp-DirListing-content')[0];
    node.addEventListener('contextmenu', function (event) {
        event.preventDefault();
        var path = fbWidget.pathForClick(event) || '';
        var ext = '.' + path.split('.').pop();
        var factories = registry.preferredWidgetFactories(ext);
        var widgetNames = iteration_1.toArray(iteration_1.map(factories, function (factory) {
            return factory.name;
        }));
        var prefix = "file-browser-contextmenu-" + ++Private.id;
        var openWith = null;
        if (path && widgetNames.length > 1) {
            var disposables_1 = new disposable_1.DisposableSet();
            var command = void 0;
            openWith = new menu_1.Menu({ commands: commands, keymap: keymap });
            openWith.title.label = 'Open With...';
            openWith.disposed.connect(function () { return disposables_1.dispose(); });
            var _loop_1 = function(widgetName) {
                command = prefix + ":" + widgetName;
                disposables_1.add(commands.addCommand(command, {
                    execute: function () { return fbWidget.openPath(path, widgetName); },
                    label: widgetName
                }));
                openWith.addItem({ command: command });
            };
            for (var _i = 0, widgetNames_1 = widgetNames; _i < widgetNames_1.length; _i++) {
                var widgetName = widgetNames_1[_i];
                _loop_1(widgetName);
            }
        }
        var menu = createContextMenu(fbWidget, openWith);
        menu.open(event.clientX, event.clientY);
    });
    addCommands(app, fbWidget, docManager);
    [
        cmdIds.save,
        cmdIds.restoreCheckpoint,
        cmdIds.saveAs,
        cmdIds.close,
        cmdIds.closeAllFiles,
    ].forEach(function (command) { return palette.addItem({ command: command, category: category }); });
    var menu = createMenu(app, Object.keys(creatorCmds));
    mainMenu.addMenu(menu, { rank: 1 });
    fbWidget.title.label = 'Files';
    fbWidget.id = 'file-browser';
    app.shell.addToLeftArea(fbWidget, { rank: 40 });
    app.commands.execute(cmdIds.showBrowser, void 0);
    // Handle fileCreator items as they are added.
    registry.changed.connect(function (sender, args) {
        if (args.type === 'fileCreator') {
            menu.dispose();
            var name_1 = args.name;
            if (args.change === 'added') {
                addCreator(name_1);
            }
            else {
                creatorCmds[name_1].dispose();
                delete creatorCmds[name_1];
            }
            menu = createMenu(app, Object.keys(creatorCmds));
            mainMenu.addMenu(menu, { rank: 1 });
        }
    });
    return fbModel;
}
/**
 * Add the filebrowser commands to the application's command registry.
 */
function addCommands(app, fbWidget, docManager) {
    var commands = app.commands;
    commands.addCommand(cmdIds.save, {
        label: 'Save',
        caption: 'Save and create checkpoint',
        execute: function () {
            if (tracker.currentWidget) {
                var context_1 = docManager.contextForWidget(tracker.currentWidget);
                return context_1.save().then(function () {
                    return context_1.createCheckpoint();
                });
            }
        }
    });
    commands.addCommand(cmdIds.restoreCheckpoint, {
        label: 'Revert to Checkpoint',
        caption: 'Revert contents to previous checkpoint',
        execute: function () {
            if (tracker.currentWidget) {
                var context_2 = docManager.contextForWidget(tracker.currentWidget);
                context_2.restoreCheckpoint().then(function () {
                    context_2.revert();
                });
            }
        }
    });
    commands.addCommand(cmdIds.saveAs, {
        label: 'Save As...',
        caption: 'Save with new path and create checkpoint',
        execute: function () {
            if (tracker.currentWidget) {
                var context_3 = docManager.contextForWidget(tracker.currentWidget);
                return context_3.saveAs().then(function () {
                    return context_3.createCheckpoint();
                });
            }
        }
    });
    commands.addCommand(cmdIds.open, {
        execute: function (args) {
            var path = args['path'];
            return fbWidget.openPath(path);
        }
    });
    commands.addCommand(cmdIds.close, {
        label: 'Close',
        execute: function () {
            if (tracker.currentWidget) {
                tracker.currentWidget.close();
            }
        }
    });
    commands.addCommand(cmdIds.closeAllFiles, {
        label: 'Close All',
        execute: function () {
            tracker.forEach(function (widget) { widget.close(); });
        }
    });
    commands.addCommand(cmdIds.showBrowser, {
        execute: function () { return app.shell.activateLeft(fbWidget.id); }
    });
    commands.addCommand(cmdIds.hideBrowser, {
        execute: function () {
            if (!fbWidget.isHidden) {
                app.shell.collapseLeft();
            }
        }
    });
    commands.addCommand(cmdIds.toggleBrowser, {
        execute: function () {
            if (fbWidget.isHidden) {
                commands.execute(cmdIds.showBrowser, void 0);
            }
            else {
                commands.execute(cmdIds.hideBrowser, void 0);
            }
        }
    });
}
/**
 * Create a top level menu for the file browser.
 */
function createMenu(app, creatorCmds) {
    var commands = app.commands, keymap = app.keymap;
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    menu.title.label = 'File';
    creatorCmds.forEach(function (name) {
        menu.addItem({ command: Private.commandForName(name) });
    });
    [
        cmdIds.save,
        cmdIds.restoreCheckpoint,
        cmdIds.saveAs,
        cmdIds.close,
        cmdIds.closeAllFiles,
    ].forEach(function (command) { menu.addItem({ command: command }); });
    return menu;
}
/**
 * Create a context menu for the file browser listing.
 */
function createContextMenu(fbWidget, openWith) {
    var commands = fbWidget.commands, keymap = fbWidget.keymap;
    var menu = new menu_1.Menu({ commands: commands, keymap: keymap });
    var prefix = "file-browser-" + ++Private.id;
    var disposables = new disposable_1.DisposableSet();
    var command;
    // Remove all the commands associated with this menu upon disposal.
    menu.disposed.connect(function () { disposables.dispose(); });
    command = prefix + ":open";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.open(); },
        icon: 'fa fa-folder-open-o',
        label: 'Open',
        mnemonic: 0
    }));
    menu.addItem({ command: command });
    if (openWith) {
        menu.addItem({ type: 'submenu', menu: openWith });
    }
    command = prefix + ":rename";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.rename(); },
        icon: 'fa fa-edit',
        label: 'Rename',
        mnemonic: 0
    }));
    menu.addItem({ command: command });
    command = prefix + ":delete";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.delete(); },
        icon: 'fa fa-remove',
        label: 'Delete',
        mnemonic: 0
    }));
    menu.addItem({ command: command });
    command = prefix + ":duplicate";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.duplicate(); },
        icon: 'fa fa-copy',
        label: 'Duplicate'
    }));
    menu.addItem({ command: command });
    command = prefix + ":cut";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.cut(); },
        icon: 'fa fa-cut',
        label: 'Cut'
    }));
    menu.addItem({ command: command });
    command = prefix + ":copy";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.copy(); },
        icon: 'fa fa-copy',
        label: 'Copy',
        mnemonic: 0
    }));
    menu.addItem({ command: command });
    command = prefix + ":paste";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.paste(); },
        icon: 'fa fa-paste',
        label: 'Paste',
        mnemonic: 0
    }));
    menu.addItem({ command: command });
    command = prefix + ":download";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.download(); },
        icon: 'fa fa-download',
        label: 'Download'
    }));
    menu.addItem({ command: command });
    command = prefix + ":shutdown";
    disposables.add(commands.addCommand(command, {
        execute: function () { return fbWidget.shutdownKernels(); },
        icon: 'fa fa-stop-circle-o',
        label: 'Shutdown Kernel'
    }));
    menu.addItem({ command: command });
    menu.disposed.connect(function () { return disposables.dispose(); });
    return menu;
}
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * The ID counter prefix for new commands.
     *
     * #### Notes
     * Even though the commands are disposed when the menus are disposed,
     * in order to guarantee there are no race conditions, each set of commands
     * is prefixed.
     */
    Private.id = 0;
    /**
     * Get the command for a name.
     */
    function commandForName(name) {
        name = name.split(' ').join('-').toLocaleLowerCase();
        return "file-operations:new-" + name;
    }
    Private.commandForName = commandForName;
})(Private || (Private = {}));
//# sourceMappingURL=plugin.js.map