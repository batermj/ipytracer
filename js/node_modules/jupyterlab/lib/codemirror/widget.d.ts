import * as CodeMirror from 'codemirror';
import 'codemirror/mode/meta';
import { Message } from 'phosphor/lib/core/messaging';
import { ResizeMessage, Widget } from 'phosphor/lib/ui/widget';
/**
 * The name of the default CodeMirror theme
 */
export declare const DEFAULT_CODEMIRROR_THEME: string;
/**
 * A widget which hosts a CodeMirror editor.
 */
export declare class CodeMirrorWidget extends Widget {
    /**
     * Construct a CodeMirror widget.
     */
    constructor(options?: CodeMirror.EditorConfiguration);
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Get the editor wrapped by the widget.
     *
     * #### Notes
     * This is a ready-only property.
     */
    readonly editor: CodeMirror.Editor;
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the notebook panel's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before_detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * Handle `'activate-request'` messages.
     */
    protected onActivateRequest(msg: Message): void;
    /**
     * Handle `focus` events for the widget.
     */
    private _evtFocus(event);
    private _editor;
    private _needsRefresh;
    private _resizing;
}
