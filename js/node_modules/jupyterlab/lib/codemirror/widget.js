// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var CodeMirror = require('codemirror');
require('codemirror/mode/meta');
var widget_1 = require('phosphor/lib/ui/widget');
/**
 * The class name added to CodeMirrorWidget instances.
 */
var EDITOR_CLASS = 'jp-CodeMirrorWidget';
/**
 * The name of the default CodeMirror theme
 */
exports.DEFAULT_CODEMIRROR_THEME = 'jupyter';
/**
 * A widget which hosts a CodeMirror editor.
 */
var CodeMirrorWidget = (function (_super) {
    __extends(CodeMirrorWidget, _super);
    /**
     * Construct a CodeMirror widget.
     */
    function CodeMirrorWidget(options) {
        if (options === void 0) { options = {}; }
        _super.call(this);
        this._editor = null;
        this._needsRefresh = true;
        this._resizing = -1;
        this.addClass(EDITOR_CLASS);
        options.theme = (options.theme || exports.DEFAULT_CODEMIRROR_THEME);
        this._editor = CodeMirror(this.node, options);
    }
    /**
     * Dispose of the resources held by the widget.
     */
    CodeMirrorWidget.prototype.dispose = function () {
        clearTimeout(this._resizing);
        this._editor = null;
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(CodeMirrorWidget.prototype, "editor", {
        /**
         * Get the editor wrapped by the widget.
         *
         * #### Notes
         * This is a ready-only property.
         */
        get: function () {
            return this._editor;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the notebook panel's node. It should
     * not be called directly by user code.
     */
    CodeMirrorWidget.prototype.handleEvent = function (event) {
        switch (event.type) {
            case 'focus':
                this._evtFocus(event);
                break;
            default:
                break;
        }
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    CodeMirrorWidget.prototype.onAfterAttach = function (msg) {
        this.node.addEventListener('focus', this, true);
        if (!this.isVisible) {
            this._needsRefresh = true;
            return;
        }
        this._editor.refresh();
        this._needsRefresh = false;
    };
    /**
     * Handle `before_detach` messages for the widget.
     */
    CodeMirrorWidget.prototype.onBeforeDetach = function (msg) {
        this.node.removeEventListener('focus', this, true);
    };
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    CodeMirrorWidget.prototype.onAfterShow = function (msg) {
        if (this._needsRefresh) {
            this._editor.refresh();
            this._needsRefresh = false;
        }
    };
    /**
     * A message handler invoked on an `'resize'` message.
     */
    CodeMirrorWidget.prototype.onResize = function (msg) {
        var _this = this;
        if (msg.width < 0 || msg.height < 0) {
            if (this._resizing === -1) {
                this._resizing = setTimeout(function () {
                    _this._editor.setSize(null, null);
                    _this._resizing = -1;
                }, 500);
            }
        }
        else {
            this._editor.setSize(msg.width, msg.height);
        }
        this._needsRefresh = true;
    };
    /**
     * Handle `'activate-request'` messages.
     */
    CodeMirrorWidget.prototype.onActivateRequest = function (msg) {
        this._editor.focus();
    };
    /**
     * Handle `focus` events for the widget.
     */
    CodeMirrorWidget.prototype._evtFocus = function (event) {
        if (this._needsRefresh) {
            this._editor.refresh();
            this._needsRefresh = false;
        }
    };
    return CodeMirrorWidget;
}(widget_1.Widget));
exports.CodeMirrorWidget = CodeMirrorWidget;
//# sourceMappingURL=widget.js.map