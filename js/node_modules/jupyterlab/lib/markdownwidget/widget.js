// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var panel_1 = require('phosphor/lib/ui/panel');
var widget_1 = require('phosphor/lib/ui/widget');
var activitymonitor_1 = require('../common/activitymonitor');
var docregistry_1 = require('../docregistry');
/**
 * The class name added to a Jupyter MarkdownWidget
 */
var MD_CLASS = 'jp-MarkdownWidget';
/**
 * The timeout to wait for change activity to have ceased before rendering.
 */
var RENDER_TIMEOUT = 1000;
/**
 * A widget for rendered markdown.
 */
var MarkdownWidget = (function (_super) {
    __extends(MarkdownWidget, _super);
    /**
     * Construct a new markdown widget.
     */
    function MarkdownWidget(context, rendermime) {
        var _this = this;
        _super.call(this);
        this._context = null;
        this._monitor = null;
        this._rendermime = null;
        this.addClass(MD_CLASS);
        this.layout = new panel_1.PanelLayout();
        this.title.label = context.path.split('/').pop();
        this._rendermime = rendermime;
        rendermime.resolver = context;
        this._context = context;
        context.pathChanged.connect(function (c, path) {
            _this.title.label = path.split('/').pop();
        });
        // Throttle the rendering rate of the widget.
        this._monitor = new activitymonitor_1.ActivityMonitor({
            signal: context.model.contentChanged,
            timeout: RENDER_TIMEOUT
        });
        this._monitor.activityStopped.connect(function () { _this.update(); });
    }
    /**
     * Dispose of the resources held by the widget.
     */
    MarkdownWidget.prototype.dispose = function () {
        this._monitor.dispose();
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle an `after-attach` message to the widget.
     */
    MarkdownWidget.prototype.onAfterAttach = function (msg) {
        this.update();
    };
    /**
     * Handle an `update-request` message to the widget.
     */
    MarkdownWidget.prototype.onUpdateRequest = function (msg) {
        var context = this._context;
        var model = context.model;
        var layout = this.layout;
        var bundle = { 'text/markdown': model.toString() };
        var widget = this._rendermime.render({ bundle: bundle });
        if (layout.widgets.length) {
            layout.widgets.at(0).dispose();
        }
        layout.addWidget(widget);
    };
    return MarkdownWidget;
}(widget_1.Widget));
exports.MarkdownWidget = MarkdownWidget;
/**
 * A widget factory for Markdown.
 */
var MarkdownWidgetFactory = (function (_super) {
    __extends(MarkdownWidgetFactory, _super);
    /**
     * Construct a new markdown widget factory.
     */
    function MarkdownWidgetFactory(options) {
        _super.call(this, options);
        this._rendermime = null;
        this._rendermime = options.rendermime;
    }
    /**
     * Create a new widget given a context.
     */
    MarkdownWidgetFactory.prototype.createNewWidget = function (context) {
        return new MarkdownWidget(context, this._rendermime.clone());
    };
    return MarkdownWidgetFactory;
}(docregistry_1.ABCWidgetFactory));
exports.MarkdownWidgetFactory = MarkdownWidgetFactory;
//# sourceMappingURL=widget.js.map