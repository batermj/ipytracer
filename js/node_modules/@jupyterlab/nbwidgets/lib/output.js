// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var jupyter_js_widgets_1 = require('jupyter-js-widgets');
var panel_1 = require('phosphor/lib/ui/panel');
var output_area_1 = require('jupyterlab/lib/notebook/output-area');
var _ = require('underscore');
var $ = require('jquery');
var OutputModel = (function (_super) {
    __extends(OutputModel, _super);
    function OutputModel() {
        _super.apply(this, arguments);
        this._msgHook = null;
    }
    OutputModel.prototype.defaults = function () {
        return _.extend(_super.prototype.defaults.call(this), {
            _model_name: 'OutputModel',
            _view_name: 'OutputView',
            msg_id: ''
        });
    };
    OutputModel.prototype.initialize = function (attributes, options) {
        var _this = this;
        _super.prototype.initialize.call(this, attributes, options);
        this._outputs = new output_area_1.OutputAreaModel();
        this.listenTo(this, 'change:msg_id', this.reset_msg_id);
        this.widget_manager.context.kernelChanged.connect(function (sender, kernel) {
            _this._msgHook.dispose();
        });
        this.reset_msg_id();
    };
    OutputModel.prototype.reset_msg_id = function () {
        var _this = this;
        if (this._msgHook) {
            this._msgHook.dispose();
        }
        this._msgHook = null;
        var kernel = this.widget_manager.context.kernel;
        var msgId = this.get('msg_id');
        if (msgId && kernel) {
            this._msgHook = kernel.registerMessageHook(this.get('msg_id'), function (msg) {
                _this.add(msg);
                return false;
            });
        }
    };
    OutputModel.prototype.add = function (msg) {
        var msgType = msg.header.msg_type;
        switch (msgType) {
            case 'execute_result':
            case 'display_data':
            case 'stream':
            case 'error':
                var model = msg.content;
                model.output_type = msgType;
                this._outputs.add(model);
                break;
            case 'clear_output':
                this.clear_output(msg.content.wait);
                break;
            default:
                break;
        }
    };
    OutputModel.prototype.clear_output = function (wait) {
        if (wait === void 0) { wait = false; }
        this._outputs.clear(wait);
    };
    Object.defineProperty(OutputModel.prototype, "outputs", {
        get: function () {
            return this._outputs;
        },
        enumerable: true,
        configurable: true
    });
    return OutputModel;
}(jupyter_js_widgets_1.DOMWidgetModel));
exports.OutputModel = OutputModel;
var OutputView = (function (_super) {
    __extends(OutputView, _super);
    function OutputView() {
        _super.apply(this, arguments);
    }
    OutputView.prototype._createElement = function (tagName) {
        this.pWidget = new panel_1.Panel();
        return this.pWidget.node;
    };
    OutputView.prototype._setElement = function (el) {
        if (this.el || el !== this.pWidget.node) {
            // Boxes don't allow setting the element beyond the initial creation.
            throw new Error('Cannot reset the DOM element.');
        }
        this.el = this.pWidget.node;
        this.$el = $(this.pWidget.node);
    };
    /**
     * Called when view is rendered.
     */
    OutputView.prototype.render = function () {
        this._outputView = new output_area_1.OutputAreaWidget({
            rendermime: this.model.widget_manager.rendermime
        });
        this._outputView.model = this.model.outputs;
        this._outputView.trusted = true;
        this.pWidget.insertWidget(0, this._outputView);
        this.pWidget.addClass('jupyter-widgets');
        this.pWidget.addClass('widget-output');
        this.update(); // Set defaults.
    };
    /**
     * Update the contents of this view
     *
     * Called when the model is changed.  The model may have been
     * changed by another view or by a state update from the back-end.
     */
    OutputView.prototype.update = function () {
        return _super.prototype.update.call(this);
    };
    OutputView.prototype.remove = function () {
        this._outputView.dispose();
        return _super.prototype.remove.call(this);
    };
    return OutputView;
}(jupyter_js_widgets_1.DOMWidgetView));
exports.OutputView = OutputView;
