// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var docregistry_1 = require('jupyterlab/lib/docregistry');
var disposable_1 = require('phosphor/lib/core/disposable');
var index_1 = require('./index');
var output_1 = require('./output');
var widgets = require('jupyter-js-widgets');
widgets['OutputModel'] = output_1.OutputModel;
widgets['OutputView'] = output_1.OutputView;
require('jupyter-js-widgets/css/widgets-base.css');
var WIDGET_MIMETYPE = 'application/vnd.jupyter.widget-view+json';
var NBWidgetExtension = (function () {
    function NBWidgetExtension() {
        this._registry = [];
    }
    /**
     * Create a new extension object.
     */
    NBWidgetExtension.prototype.createNew = function (nb, context) {
        var wManager = new index_1.WidgetManager(context, nb.content.rendermime);
        wManager.register({
            name: 'jupyter-js-widgets',
            version: widgets.version,
            exports: widgets
        });
        this._registry.forEach(function (data) { return wManager.register(data); });
        var wRenderer = new index_1.WidgetRenderer(wManager);
        nb.content.rendermime.addRenderer(WIDGET_MIMETYPE, wRenderer, 0);
        return new disposable_1.DisposableDelegate(function () {
            if (nb.rendermime) {
                nb.rendermime.removeRenderer(WIDGET_MIMETYPE);
            }
            wRenderer.dispose();
            wManager.dispose();
        });
    };
    /**
     * Register a widget module.
     */
    NBWidgetExtension.prototype.registerWidget = function (data) {
        this._registry.push(data);
    };
    return NBWidgetExtension;
}());
exports.NBWidgetExtension = NBWidgetExtension;
/**
 * The widget manager provider.
 */
var widgetManagerProvider = {
    id: 'jupyter.extensions.nbWidgetManager',
    provides: index_1.INBWidgetExtension,
    requires: [docregistry_1.IDocumentRegistry],
    activate: activateWidgetExtension,
    autoStart: true
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = widgetManagerProvider;
/**
 * Activate the widget extension.
 */
function activateWidgetExtension(app, registry) {
    var extension = new NBWidgetExtension();
    registry.addWidgetExtension('Notebook', extension);
    return extension;
}
