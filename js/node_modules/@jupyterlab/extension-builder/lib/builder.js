// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var path = require('path');
var webpack = require('webpack');
var webpack_config_1 = require('webpack-config');
var plugin_1 = require('./plugin');
/**
 * The default file loaders.
 */
var DEFAULT_LOADERS = [
    { test: /\.json$/, loader: 'json-loader' },
    { test: /\.html$/, loader: 'file-loader' },
    { test: /\.(jpg|png|gif)$/, loader: 'file-loader' },
    { test: /\.woff2(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff' },
    { test: /\.woff(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/font-woff' },
    { test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=application/octet-stream' },
    { test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader' },
    { test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url-loader?limit=10000&mimetype=image/svg+xml' }
];
/**
 * Build a JupyterLab extension.
 *
 * @param options - The options used to build the extension.
 */
function buildExtension(options) {
    var name = options.name;
    if (!name) {
        throw Error('Must specify a name for the extension');
    }
    if (!options.entry) {
        throw Error('Must specify an entry module');
    }
    if (!options.outputDir) {
        throw Error('Must specify an output directory');
    }
    // Create the named entry point to the entryPath.
    var entry = {};
    entry[name] = options.entry;
    var config = new webpack_config_1.Config().merge({
        // The default options.
        entry: entry,
        output: {
            path: path.resolve(options.outputDir),
            filename: '[name].bundle.js',
            publicPath: "labextension/" + name
        },
        node: {
            fs: 'empty'
        },
        debug: true,
        bail: true,
        plugins: [new plugin_1.JupyterLabPlugin()]
    }).merge(options.config || {});
    // Add the CSS extractors unless explicitly told otherwise.
    if (options.extractCSS !== false) {
        // Note that we have to use an explicit local public path
        // otherwise the urls in the extracted CSS will point to the wrong
        // location.
        // See https://github.com/webpack/extract-text-webpack-plugin/issues/27#issuecomment-77531770
        var loader = ExtractTextPlugin.extract('style-loader', 'css-loader', { publicPath: './' });
        config.merge({
            module: {
                loaders: [{ test: /\.css$/, loader: loader }]
            },
            plugins: [new ExtractTextPlugin('[name].css')]
        });
    }
    // Add the rest of the default loaders unless explicitly told otherwise.
    if (options.useDefaultLoaders !== false) {
        config.merge({
            module: {
                loaders: DEFAULT_LOADERS
            }
        });
    }
    // Set up and run the WebPack compilation.
    var compiler = webpack(config);
    compiler.context = name;
    compiler.run(function (err, stats) {
        if (err) {
            console.error(err.stack || err);
            if (err.details) {
                console.error(err.details);
            }
        }
        else {
            console.log("\n\nSuccessfully built \"" + name + "\":\n");
            process.stdout.write(stats.toString({
                chunks: true,
                modules: false,
                chunkModules: false,
                colors: require('supports-color')
            }) + '\n');
        }
    });
}
exports.buildExtension = buildExtension;
